package org.xtext.commonlang.tests;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.resource.FileExtensionProvider;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.CommonlangInjectorProvider;
import org.xtext.commonlang.CLfile;
import org.xtext.commonlang.CommonlangPackage;
import org.xtext.commonlang.Script;
import org.xtext.generator.CommonlangGenerator;

@InjectWith(CommonlangInjectorProvider.class)
@RunWith(XtextRunner.class)
@SuppressWarnings("all")
public class CommonlangTesting {
  @Inject
  private ResourceSet rs;
  
  @Inject
  @Extension
  private FileExtensionProvider fep;
  
  @Inject
  private ParseHelper<CLfile> fileparser;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void testInvalidTypes() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("script AntiTest targets (RobotType,Robot) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void assignments() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Instantiate wrong type or empty");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("int j;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("int i = \"\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("string s = true;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("boolean b = 0;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Assign wrong type to existing variable");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i = false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("s = 0;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = \"\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Increment and decrement non-int");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("s++;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("s--;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b++;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b--;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//return wrong types");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("int returnsValueInt() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("metamethodscollection{}\t");
      _builder.newLine();
      CLfile sc = this.fileparser.parse(_builder);
      EClass _assignment = CommonlangPackage.eINSTANCE.getAssignment();
      this._validationTestHelper.assertError(sc, _assignment, null, "Type mismatch: Expected int got string");
      EClass _assignment_1 = CommonlangPackage.eINSTANCE.getAssignment();
      this._validationTestHelper.assertError(sc, _assignment_1, null, "Type mismatch: Expected string got boolean");
      EClass _assignment_2 = CommonlangPackage.eINSTANCE.getAssignment();
      this._validationTestHelper.assertError(sc, _assignment_2, null, "Type mismatch: Expected boolean got int");
      EClass _assignment_3 = CommonlangPackage.eINSTANCE.getAssignment();
      this._validationTestHelper.assertError(sc, _assignment_3, null, "Type mismatch: Expected int got boolean");
      EClass _assignment_4 = CommonlangPackage.eINSTANCE.getAssignment();
      this._validationTestHelper.assertError(sc, _assignment_4, null, "Type mismatch: Expected string got int");
      EClass _assignment_5 = CommonlangPackage.eINSTANCE.getAssignment();
      this._validationTestHelper.assertError(sc, _assignment_5, null, "Type mismatch: Expected boolean got string");
      EClass _crement = CommonlangPackage.eINSTANCE.getCrement();
      this._validationTestHelper.assertError(sc, _crement, null, "Invalid type: Cannot perform ++ operation on string");
      EClass _crement_1 = CommonlangPackage.eINSTANCE.getCrement();
      this._validationTestHelper.assertError(sc, _crement_1, null, "Invalid type: Cannot perform -- operation on string");
      EClass _crement_2 = CommonlangPackage.eINSTANCE.getCrement();
      this._validationTestHelper.assertError(sc, _crement_2, null, "Invalid type: Cannot perform ++ operation on boolean");
      EClass _crement_3 = CommonlangPackage.eINSTANCE.getCrement();
      this._validationTestHelper.assertError(sc, _crement_3, null, "Invalid type: Cannot perform -- operation on boolean");
      EClass _method = CommonlangPackage.eINSTANCE.getMethod();
      this._validationTestHelper.assertError(sc, _method, null, "Must return value of type int");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testInvalidCalls() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("script AntiTest targets (RobotType,Robot) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void call() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//User method misspelt");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("assignment();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Metamethod with missing parameter");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("MetaMethodVoid();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void assignments() {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("metamethodscollection{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void MetaMethodVoid(int x);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      CLfile sc = this.fileparser.parse(_builder);
      EClass _userMethodCall = CommonlangPackage.eINSTANCE.getUserMethodCall();
      this._validationTestHelper.assertError(sc, _userMethodCall, "org.eclipse.xtext.diagnostics.Diagnostic.Linking", "Couldn\'t resolve reference to Method \'assignment\'");
      EClass _metaMethodCall = CommonlangPackage.eINSTANCE.getMetaMethodCall();
      this._validationTestHelper.assertError(sc, _metaMethodCall, null, "Wrong number of arguments!");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testInvalidValues() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("script AntiTest targets (RobotType,Robot) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void values() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Invalid math expressions");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("int i = (2 + \"\");");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("boolean b = true;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = (true && i);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = true + false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//String values with invalid operators");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("string s = \"Hello\" + \"howdy\"; ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("s -= \"s\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Negative non-number");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i = -false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = -false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("s = -\"string\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Comparison operators with invalid values");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = true > false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = \"string\" < \"string\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = false <=2;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = i >=\"string\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = false < \"string\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("metamethodscollection{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void MetaMethodVoid(int x);");
      _builder.newLine();
      _builder.append("}");
      CLfile sc = this.fileparser.parse(_builder);
      EClass _valueExpression = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression, null, "Type mismatch: Cannot perform + on int and string");
      EClass _valueExpression_1 = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression_1, null, "Type mismatch: Cannot perform && on boolean and int");
      EClass _valueExpression_2 = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression_2, null, "Operator + is invalid for types boolean and boolean");
      EClass _valueExpression_3 = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression_3, null, "Operator + is invalid for types string and string");
      EClass _assignment = CommonlangPackage.eINSTANCE.getAssignment();
      this._validationTestHelper.assertError(sc, _assignment, null, "Invalid operation for type string");
      EClass _assignment_1 = CommonlangPackage.eINSTANCE.getAssignment();
      this._validationTestHelper.assertError(sc, _assignment_1, null, "Type mismatch: Expected int got boolean");
      EClass _negNumberValue = CommonlangPackage.eINSTANCE.getNegNumberValue();
      this._validationTestHelper.assertError(sc, _negNumberValue, null, "Negative value must be a numeric value, but got boolean");
      EClass _negNumberValue_1 = CommonlangPackage.eINSTANCE.getNegNumberValue();
      this._validationTestHelper.assertError(sc, _negNumberValue_1, null, "Negative value must be a numeric value, but got string");
      EClass _valueExpression_4 = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression_4, null, "Cannot compare sizes of boolean and boolean");
      EClass _valueExpression_5 = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression_5, null, "Cannot compare sizes of string and string");
      EClass _valueExpression_6 = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression_6, null, "Cannot compare sizes of boolean and int");
      EClass _valueExpression_7 = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression_7, null, "Cannot compare sizes of int and string");
      EClass _valueExpression_8 = CommonlangPackage.eINSTANCE.getValueExpression();
      this._validationTestHelper.assertError(sc, _valueExpression_8, null, "Cannot compare sizes of boolean and string");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testInvalidStructures() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("script Test targets (RobotType,Robot) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void structureExpressions() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Invalid expressions in structures");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (1+2) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("while (\"Hello\") {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (int i = 0; i + 5; i++) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean returnStructure() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Return value only through one path");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (false) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.append("metamethodscollection{}");
      _builder.newLine();
      CLfile sc = this.fileparser.parse(_builder);
      EClass _if = CommonlangPackage.eINSTANCE.getIf();
      this._validationTestHelper.assertError(sc, _if, null, "Expected boolean expression");
      EClass _while = CommonlangPackage.eINSTANCE.getWhile();
      this._validationTestHelper.assertError(sc, _while, null, "Expected boolean expression");
      EClass _for = CommonlangPackage.eINSTANCE.getFor();
      this._validationTestHelper.assertError(sc, _for, null, "Expected boolean expression");
      EClass _method = CommonlangPackage.eINSTANCE.getMethod();
      this._validationTestHelper.assertError(sc, _method, null, "Method has return type boolean but may not return a valid value");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testValidScript() {
    try {
      CLfile sc = this.fileparser.parse(this.validScript);
      this._validationTestHelper.assertNoErrors(sc);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testGeneration() {
    try {
      String _primaryFileExtension = this.fep.getPrimaryFileExtension();
      String _plus = ("test." + _primaryFileExtension);
      URI _createURI = URI.createURI(_plus);
      final Resource resource = this.rs.createResource(_createURI);
      StringInputStream _asStream = this.asStream(this.validScript);
      resource.load(_asStream, null);
      String result = "";
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<Script> _filter = Iterables.<Script>filter(_iterable, Script.class);
      for (final Script e : _filter) {
        {
          CommonlangGenerator _commonlangGenerator = new CommonlangGenerator();
          CharSequence _compile = _commonlangGenerator.compile(e);
          String _string = _compile.toString();
          result = _string;
          InputOutput.<String>println(result);
          boolean _equals = result.equals(this.generatedScript);
          Assert.assertTrue(_equals);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private StringInputStream asStream(final CharSequence s) {
    String _string = s.toString();
    return new StringInputStream(_string);
  }
  
  private String generatedScript = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package input;");
      _builder.newLine();
      _builder.append("import java.util.ArrayList;");
      _builder.newLine();
      _builder.append("import input.RobotScript;");
      _builder.newLine();
      _builder.append("import CommonLanguageObjects.*;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class Test extends RobotScript {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static void main(String[] args) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("Test roboscript = new Test();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("roboscript.buildModel();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void buildModel() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("name = \"Test\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("robotlist = new ArrayList<String>();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("sc = new Script(");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("new Method[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("new Method(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"void\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"assignments\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Parameter[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"int i = 0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"string s = \\\"\\\"\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"boolean b = true\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"i = 1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"s = \\\"Hello\\\"\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"i+=1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"i-=1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("),new Method(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"void\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"call\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Parameter[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"assignments()\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"MoveForward(5)\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("),new Method(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"void\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"values\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Parameter[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("new Parameter(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"int\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"x\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"int i = (1+2)/3*2-5\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"i = -x+(-1)\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"boolean b = true\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = (true&&false)||i==2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"string s = \\\"Hello\\\"\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("),new Method(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"void\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"operators\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Parameter[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"int i = 1+2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"i = 2-3\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"i = 2/3\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"i = 2*3\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"boolean b = true||false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = true&&false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = true!&&false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = true!||false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = i>2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = i<2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = i<=2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = i>=2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = i==2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"b = i!=2\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("),new Method(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"void\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"structures\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Parameter[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("new If(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\"true&&false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("\"LightOn()\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}),");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Else(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("\"LightOff()\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new While(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\"false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("\"Idle(5)\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("),new For(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\"int i = 0\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\"i<10\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\"i+=1\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("\"TurnLeft(i)\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("),new Method(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"int\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"returnsValue\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Parameter[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("\"return 5\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("),new Method(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"boolean\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("\"returnStructure\",");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Parameter[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("},");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("new If(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("\"false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("),");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("\"return true\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("}),");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append("new Else(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("new Block(new Expression[] {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append("new Expression(");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t\t");
      _builder.append("\"return false\"");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("})");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append(")");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(");");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("robotlist.add(\"RobotType,Robot\");");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("generateCode();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("};");
      _builder.newLine();
      _builder.append("};");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String validScript = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("script Test targets (RobotType,Robot) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void assignments() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Instantiate");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("int i = 0;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("string s = \"\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("boolean b = true;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Assign to existing variable");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i = 1;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("s = \"Hello\";");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Increment and decrement");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i++;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i--;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void call() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//User method");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("assignments(); ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Metamethod");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("MoveForward(5);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void values(int x) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Mathematical expression");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("int i = (1 + 2 )/ 3 * 2 - 5;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Negative number ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i = -x + (-1);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Boolean values");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("boolean b = true;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = (true && false) || i == 2;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//String values");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("string s = \"Hello\";");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void operators() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Mathematical operators");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("int i = 1 + 2;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i = 2-3;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i = 2/3;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("i = 2*3;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Boolean operators");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("boolean b = true || false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = true && false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = true !&& false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = true !|| false;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Comparison operators");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = i > 2;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = i < 2;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = i <=2;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = i >=2;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = i == 2;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b = i != 2;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("void structures() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//If - else");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (true && false) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("LightOn();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("LightOff();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//While");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("while (false) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("Idle(5);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//For");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("for (int i = 0; i < 10; i++) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("TurnLeft(i);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("int returnsValue() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//return value");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean returnStructure() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Returns value through structure");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (false) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("} else {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return false; ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("metamethodscollection {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void ReadSensors();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean Touching();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean TouchingBoth();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean TouchingLeft();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean TouchingRight();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean Seeing();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean SeeingBoth();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean SeeingLeft();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean SeeingRight();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void MoveForward(int time);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void MoveBackward(int time);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void TurnRight(int time);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void TurnLeft(int time);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void Idle(int time);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void LightOn();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void LightOff();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta boolean FoundObject();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void FollowObject();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("meta void Delay(int time);");
      _builder.newLine();
      _builder.append("}");
      return _builder.toString();
    }
  }.apply();
}
