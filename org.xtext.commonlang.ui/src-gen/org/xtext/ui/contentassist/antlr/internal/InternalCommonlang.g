/*
 * generated by Xtext
 */
grammar InternalCommonlang;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.CommonlangGrammarAccess;

}

@parser::members {
 
 	private CommonlangGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CommonlangGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCLfile
entryRuleCLfile 
:
{ before(grammarAccess.getCLfileRule()); }
	 ruleCLfile
{ after(grammarAccess.getCLfileRule()); } 
	 EOF 
;

// Rule CLfile
ruleCLfile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCLfileAccess().getGroup()); }
(rule__CLfile__Group__0)
{ after(grammarAccess.getCLfileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScript
entryRuleScript 
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScriptAccess().getGroup()); }
(rule__Script__Group__0)
{ after(grammarAccess.getScriptAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMetaMethods
entryRuleMetaMethods 
:
{ before(grammarAccess.getMetaMethodsRule()); }
	 ruleMetaMethods
{ after(grammarAccess.getMetaMethodsRule()); } 
	 EOF 
;

// Rule MetaMethods
ruleMetaMethods
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMetaMethodsAccess().getGroup()); }
(rule__MetaMethods__Group__0)
{ after(grammarAccess.getMetaMethodsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression 
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleExpressionAccess().getAlternatives()); }
(rule__SimpleExpression__Alternatives)
{ after(grammarAccess.getSimpleExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStructureExpression
entryRuleStructureExpression 
:
{ before(grammarAccess.getStructureExpressionRule()); }
	 ruleStructureExpression
{ after(grammarAccess.getStructureExpressionRule()); } 
	 EOF 
;

// Rule StructureExpression
ruleStructureExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStructureExpressionAccess().getAlternatives()); }
(rule__StructureExpression__Alternatives)
{ after(grammarAccess.getStructureExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleMetaMethod
entryRuleMetaMethod 
:
{ before(grammarAccess.getMetaMethodRule()); }
	 ruleMetaMethod
{ after(grammarAccess.getMetaMethodRule()); } 
	 EOF 
;

// Rule MetaMethod
ruleMetaMethod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMetaMethodAccess().getGroup()); }
(rule__MetaMethod__Group__0)
{ after(grammarAccess.getMetaMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUserMethod
entryRuleUserMethod 
:
{ before(grammarAccess.getUserMethodRule()); }
	 ruleUserMethod
{ after(grammarAccess.getUserMethodRule()); } 
	 EOF 
;

// Rule UserMethod
ruleUserMethod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUserMethodAccess().getGroup()); }
(rule__UserMethod__Group__0)
{ after(grammarAccess.getUserMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUserMethodCall
entryRuleUserMethodCall 
:
{ before(grammarAccess.getUserMethodCallRule()); }
	 ruleUserMethodCall
{ after(grammarAccess.getUserMethodCallRule()); } 
	 EOF 
;

// Rule UserMethodCall
ruleUserMethodCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUserMethodCallAccess().getMethodAssignment()); }
(rule__UserMethodCall__MethodAssignment)
{ after(grammarAccess.getUserMethodCallAccess().getMethodAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMetaMethodCall
entryRuleMetaMethodCall 
:
{ before(grammarAccess.getMetaMethodCallRule()); }
	 ruleMetaMethodCall
{ after(grammarAccess.getMetaMethodCallRule()); } 
	 EOF 
;

// Rule MetaMethodCall
ruleMetaMethodCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMetaMethodCallAccess().getMethodAssignment()); }
(rule__MetaMethodCall__MethodAssignment)
{ after(grammarAccess.getMetaMethodCallAccess().getMethodAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleBool
entryRuleBool 
:
{ before(grammarAccess.getBoolRule()); }
	 ruleBool
{ after(grammarAccess.getBoolRule()); } 
	 EOF 
;

// Rule Bool
ruleBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolAccess().getGroup()); }
(rule__Bool__Group__0)
{ after(grammarAccess.getBoolAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator 
:
{ before(grammarAccess.getComparisonOperatorRule()); }
	 ruleComparisonOperator
{ after(grammarAccess.getComparisonOperatorRule()); } 
	 EOF 
;

// Rule ComparisonOperator
ruleComparisonOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
(rule__ComparisonOperator__Alternatives)
{ after(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanOperator
entryRuleBooleanOperator 
:
{ before(grammarAccess.getBooleanOperatorRule()); }
	 ruleBooleanOperator
{ after(grammarAccess.getBooleanOperatorRule()); } 
	 EOF 
;

// Rule BooleanOperator
ruleBooleanOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanOperatorAccess().getAlternatives()); }
(rule__BooleanOperator__Alternatives)
{ after(grammarAccess.getBooleanOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIf
entryRuleIf 
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfAccess().getGroup()); }
(rule__If__Group__0)
{ after(grammarAccess.getIfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElse
entryRuleElse 
:
{ before(grammarAccess.getElseRule()); }
	 ruleElse
{ after(grammarAccess.getElseRule()); } 
	 EOF 
;

// Rule Else
ruleElse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElseAccess().getGroup()); }
(rule__Else__Group__0)
{ after(grammarAccess.getElseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFor
entryRuleFor 
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForAccess().getGroup()); }
(rule__For__Group__0)
{ after(grammarAccess.getForAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhile
entryRuleWhile 
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileAccess().getGroup()); }
(rule__While__Group__0)
{ after(grammarAccess.getWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicValue
entryRuleBasicValue 
:
{ before(grammarAccess.getBasicValueRule()); }
	 ruleBasicValue
{ after(grammarAccess.getBasicValueRule()); } 
	 EOF 
;

// Rule BasicValue
ruleBasicValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicValueAccess().getAlternatives()); }
(rule__BasicValue__Alternatives)
{ after(grammarAccess.getBasicValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
(rule__StringValue__ValueAssignment)
{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberValue
entryRuleNumberValue 
:
{ before(grammarAccess.getNumberValueRule()); }
	 ruleNumberValue
{ after(grammarAccess.getNumberValueRule()); } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberValueAccess().getValueAssignment()); }
(rule__NumberValue__ValueAssignment)
{ after(grammarAccess.getNumberValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarReference
entryRuleVarReference 
:
{ before(grammarAccess.getVarReferenceRule()); }
	 ruleVarReference
{ after(grammarAccess.getVarReferenceRule()); } 
	 EOF 
;

// Rule VarReference
ruleVarReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarReferenceAccess().getVariAssignment()); }
(rule__VarReference__VariAssignment)
{ after(grammarAccess.getVarReferenceAccess().getVariAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturn
entryRuleReturn 
:
{ before(grammarAccess.getReturnRule()); }
	 ruleReturn
{ after(grammarAccess.getReturnRule()); } 
	 EOF 
;

// Rule Return
ruleReturn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnAccess().getGroup()); }
(rule__Return__Group__0)
{ after(grammarAccess.getReturnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodtype
entryRuleMethodtype 
:
{ before(grammarAccess.getMethodtypeRule()); }
	 ruleMethodtype
{ after(grammarAccess.getMethodtypeRule()); } 
	 EOF 
;

// Rule Methodtype
ruleMethodtype
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodtypeAccess().getAlternatives()); }
(rule__Methodtype__Alternatives)
{ after(grammarAccess.getMethodtypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDatatype
entryRuleDatatype 
:
{ before(grammarAccess.getDatatypeRule()); }
	 ruleDatatype
{ after(grammarAccess.getDatatypeRule()); } 
	 EOF 
;

// Rule Datatype
ruleDatatype
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDatatypeAccess().getAlternatives()); }
(rule__Datatype__Alternatives)
{ after(grammarAccess.getDatatypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleINTSTRING
entryRuleINTSTRING 
:
{ before(grammarAccess.getINTSTRINGRule()); }
	 ruleINTSTRING
{ after(grammarAccess.getINTSTRINGRule()); } 
	 EOF 
;

// Rule INTSTRING
ruleINTSTRING
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getINTSTRINGAccess().getINTTerminalRuleCall()); }
	RULE_INT
{ after(grammarAccess.getINTSTRINGAccess().getINTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Script__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getGroup_3_0()); }
(rule__Script__Group_3_0__0)
{ after(grammarAccess.getScriptAccess().getGroup_3_0()); }
)

    |(
{ before(grammarAccess.getScriptAccess().getGroup_3_1()); }
(rule__Script__Group_3_1__0)
{ after(grammarAccess.getScriptAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getGroup_2_0()); }
(rule__Block__Group_2_0__0)
{ after(grammarAccess.getBlockAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getBlockAccess().getExsAssignment_2_1()); }
(rule__Block__ExsAssignment_2_1)
{ after(grammarAccess.getBlockAccess().getExsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getCallParserRuleCall_0()); }
	ruleCall
{ after(grammarAccess.getSimpleExpressionAccess().getCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getAssignmentParserRuleCall_1()); }
	ruleAssignment
{ after(grammarAccess.getSimpleExpressionAccess().getAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getReturnParserRuleCall_2()); }
	ruleReturn
{ after(grammarAccess.getSimpleExpressionAccess().getReturnParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StructureExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStructureExpressionAccess().getBlockParserRuleCall_0()); }
	ruleBlock
{ after(grammarAccess.getStructureExpressionAccess().getBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStructureExpressionAccess().getIfParserRuleCall_1()); }
	ruleIf
{ after(grammarAccess.getStructureExpressionAccess().getIfParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStructureExpressionAccess().getElseParserRuleCall_2()); }
	ruleElse
{ after(grammarAccess.getStructureExpressionAccess().getElseParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStructureExpressionAccess().getForParserRuleCall_3()); }
	ruleFor
{ after(grammarAccess.getStructureExpressionAccess().getForParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStructureExpressionAccess().getWhileParserRuleCall_4()); }
	ruleWhile
{ after(grammarAccess.getStructureExpressionAccess().getWhileParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
	ruleSimpleExpression
{ after(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getStructureExpressionParserRuleCall_1()); }
	ruleStructureExpression
{ after(grammarAccess.getExpressionAccess().getStructureExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariDeclarationCrossReference_0_0_0()); }
(

)
{ after(grammarAccess.getAssignmentAccess().getVariDeclarationCrossReference_0_0_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getVariDeclarationParserRuleCall_0_0_1()); }
	ruleDeclaration
{ after(grammarAccess.getAssignmentAccess().getVariDeclarationParserRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getUserMethodCallParserRuleCall_0_0()); }
	ruleUserMethodCall
{ after(grammarAccess.getCallAccess().getUserMethodCallParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getCallAccess().getMetaMethodCallParserRuleCall_0_1()); }
	ruleMetaMethodCall
{ after(grammarAccess.getCallAccess().getMetaMethodCallParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ComparisonOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getComparisonOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); }

	'!=' 

{ after(grammarAccess.getComparisonOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getLessThanSignKeyword_2()); }

	'<' 

{ after(grammarAccess.getComparisonOperatorAccess().getLessThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getLessThanSignEqualsSignKeyword_4()); }

	'<=' 

{ after(grammarAccess.getComparisonOperatorAccess().getLessThanSignEqualsSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignEqualsSignKeyword_5()); }

	'>=' 

{ after(grammarAccess.getComparisonOperatorAccess().getGreaterThanSignEqualsSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanOperatorAccess().getAmpersandAmpersandKeyword_0()); }

	'&&' 

{ after(grammarAccess.getBooleanOperatorAccess().getAmpersandAmpersandKeyword_0()); }
)

    |(
{ before(grammarAccess.getBooleanOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }

	'||' 

{ after(grammarAccess.getBooleanOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
)

    |(
{ before(grammarAccess.getBooleanOperatorAccess().getExclamationMarkAmpersandAmpersandKeyword_2()); }

	'!&&' 

{ after(grammarAccess.getBooleanOperatorAccess().getExclamationMarkAmpersandAmpersandKeyword_2()); }
)

    |(
{ before(grammarAccess.getBooleanOperatorAccess().getExclamationMarkVerticalLineVerticalLineKeyword_3()); }

	'!||' 

{ after(grammarAccess.getBooleanOperatorAccess().getExclamationMarkVerticalLineVerticalLineKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getCallParserRuleCall_0()); }
	ruleCall
{ after(grammarAccess.getValueAccess().getCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getVarReferenceParserRuleCall_1()); }
	ruleVarReference
{ after(grammarAccess.getValueAccess().getVarReferenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBasicValueParserRuleCall_2()); }
	ruleBasicValue
{ after(grammarAccess.getValueAccess().getBasicValueParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicValueAccess().getBooleanValueParserRuleCall_0()); }
	ruleBooleanValue
{ after(grammarAccess.getBasicValueAccess().getBooleanValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicValueAccess().getNumberValueParserRuleCall_1()); }
	ruleNumberValue
{ after(grammarAccess.getBasicValueAccess().getNumberValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBasicValueAccess().getStringValueParserRuleCall_2()); }
	ruleStringValue
{ after(grammarAccess.getBasicValueAccess().getStringValueParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1()); }

	'false' 

{ after(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Methodtype__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodtypeAccess().getVoidKeyword_0()); }

	'void' 

{ after(grammarAccess.getMethodtypeAccess().getVoidKeyword_0()); }
)

    |(
{ before(grammarAccess.getMethodtypeAccess().getDatatypeParserRuleCall_1()); }
	ruleDatatype
{ after(grammarAccess.getMethodtypeAccess().getDatatypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getIntKeyword_0()); }

	'int' 

{ after(grammarAccess.getDatatypeAccess().getIntKeyword_0()); }
)

    |(
{ before(grammarAccess.getDatatypeAccess().getStringKeyword_1()); }

	'string' 

{ after(grammarAccess.getDatatypeAccess().getStringKeyword_1()); }
)

    |(
{ before(grammarAccess.getDatatypeAccess().getBooleanKeyword_2()); }

	'boolean' 

{ after(grammarAccess.getDatatypeAccess().getBooleanKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__CLfile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CLfile__Group__0__Impl
	rule__CLfile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CLfile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCLfileAccess().getScriptsAssignment_0()); }
(rule__CLfile__ScriptsAssignment_0)*
{ after(grammarAccess.getCLfileAccess().getScriptsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CLfile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CLfile__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CLfile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCLfileAccess().getMetsAssignment_1()); }
(rule__CLfile__MetsAssignment_1)
{ after(grammarAccess.getCLfileAccess().getMetsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Script__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__0__Impl
	rule__Script__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getScriptKeyword_0()); }

	'script' 

{ after(grammarAccess.getScriptAccess().getScriptKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__1__Impl
	rule__Script__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getNameAssignment_1()); }
(rule__Script__NameAssignment_1)
{ after(grammarAccess.getScriptAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__2__Impl
	rule__Script__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getTargetsKeyword_2()); }

	'targets' 

{ after(grammarAccess.getScriptAccess().getTargetsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__3__Impl
	rule__Script__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getAlternatives_3()); }
(rule__Script__Alternatives_3)
{ after(grammarAccess.getScriptAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__4__Impl
	rule__Script__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getScriptAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__5__Impl
	rule__Script__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getScriptAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__6__Impl
	rule__Script__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getMethodsAssignment_6()); }
(rule__Script__MethodsAssignment_6)*
{ after(grammarAccess.getScriptAccess().getMethodsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getScriptAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Script__Group_3_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_0__0__Impl
	rule__Script__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getLeftParenthesisKeyword_3_0_0()); }

	'(' 

{ after(grammarAccess.getScriptAccess().getLeftParenthesisKeyword_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_3_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_0__1__Impl
	rule__Script__Group_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRobottypesAssignment_3_0_1()); }
(rule__Script__RobottypesAssignment_3_0_1)
{ after(grammarAccess.getScriptAccess().getRobottypesAssignment_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_3_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_0__2__Impl
	rule__Script__Group_3_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getCommaKeyword_3_0_2()); }

	',' 

{ after(grammarAccess.getScriptAccess().getCommaKeyword_3_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_3_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRobotconfigsAssignment_3_0_3()); }
(rule__Script__RobotconfigsAssignment_3_0_3)
{ after(grammarAccess.getScriptAccess().getRobotconfigsAssignment_3_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Script__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_1__0__Impl
	rule__Script__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getLeftParenthesisKeyword_3_1_0()); }

	'(' 

{ after(grammarAccess.getScriptAccess().getLeftParenthesisKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getGroup_3_1_1()); }
(rule__Script__Group_3_1_1__0)*
{ after(grammarAccess.getScriptAccess().getGroup_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Script__Group_3_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_1_1__0__Impl
	rule__Script__Group_3_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getLeftParenthesisKeyword_3_1_1_0()); }

	'(' 

{ after(grammarAccess.getScriptAccess().getLeftParenthesisKeyword_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_3_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_1_1__1__Impl
	rule__Script__Group_3_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRobottypesAssignment_3_1_1_1()); }
(rule__Script__RobottypesAssignment_3_1_1_1)
{ after(grammarAccess.getScriptAccess().getRobottypesAssignment_3_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_3_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_1_1__2__Impl
	rule__Script__Group_3_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getCommaKeyword_3_1_1_2()); }

	',' 

{ after(grammarAccess.getScriptAccess().getCommaKeyword_3_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_3_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_1_1__3__Impl
	rule__Script__Group_3_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRobotconfigsAssignment_3_1_1_3()); }
(rule__Script__RobotconfigsAssignment_3_1_1_3)
{ after(grammarAccess.getScriptAccess().getRobotconfigsAssignment_3_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group_3_1_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group_3_1_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group_3_1_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRightParenthesisKeyword_3_1_1_4()); }

	')' 

{ after(grammarAccess.getScriptAccess().getRightParenthesisKeyword_3_1_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MetaMethods__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethods__Group__0__Impl
	rule__MetaMethods__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethods__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodsAccess().getMetaMethodsAction_0()); }
(

)
{ after(grammarAccess.getMetaMethodsAccess().getMetaMethodsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethods__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethods__Group__1__Impl
	rule__MetaMethods__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethods__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodsAccess().getMetamethodscollectionKeyword_1()); }

	'metamethodscollection' 

{ after(grammarAccess.getMetaMethodsAccess().getMetamethodscollectionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethods__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethods__Group__2__Impl
	rule__MetaMethods__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethods__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodsAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMetaMethodsAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethods__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethods__Group__3__Impl
	rule__MetaMethods__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethods__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodsAccess().getMethodsAssignment_3()); }
(rule__MetaMethods__MethodsAssignment_3)*
{ after(grammarAccess.getMetaMethodsAccess().getMethodsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethods__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethods__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethods__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodsAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getMetaMethodsAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getAlternatives_2()); }
(rule__Block__Alternatives_2)*
{ after(grammarAccess.getBlockAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Block__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group_2_0__0__Impl
	rule__Block__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getExsAssignment_2_0_0()); }
(rule__Block__ExsAssignment_2_0_0)
{ after(grammarAccess.getBlockAccess().getExsAssignment_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getSemicolonKeyword_2_0_1()); }

	';' 

{ after(grammarAccess.getBlockAccess().getSemicolonKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariAssignment_0()); }
(rule__Assignment__VariAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVariAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_1()); }
(rule__Assignment__Group_1__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1__0__Impl
	rule__Assignment__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1_0()); }
(
	'=' 
)
{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_1_1()); }
(rule__Assignment__ValueAssignment_1_1)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getAlternatives_0()); }
(rule__Call__Alternatives_0)
{ after(grammarAccess.getCallAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParametersAssignment_2()); }
(rule__Call__ParametersAssignment_2)?
{ after(grammarAccess.getCallAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getGroup_3()); }
(rule__Call__Group_3__0)*
{ after(grammarAccess.getCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Call__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group_3__0__Impl
	rule__Call__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCallAccess().getCommaKeyword_3_0()); }
(
	',' 
)
{ after(grammarAccess.getCallAccess().getCommaKeyword_3_0()); }
)
(
{ before(grammarAccess.getCallAccess().getCommaKeyword_3_0()); }
(
	',' 
)*
{ after(grammarAccess.getCallAccess().getCommaKeyword_3_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParametersAssignment_3_1()); }
(rule__Call__ParametersAssignment_3_1)
{ after(grammarAccess.getCallAccess().getParametersAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MetaMethod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group__0__Impl
	rule__MetaMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getMetaKeyword_0()); }

	'meta' 

{ after(grammarAccess.getMetaMethodAccess().getMetaKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group__1__Impl
	rule__MetaMethod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getTypeAssignment_1()); }
(rule__MetaMethod__TypeAssignment_1)
{ after(grammarAccess.getMetaMethodAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethod__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group__2__Impl
	rule__MetaMethod__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getNameAssignment_2()); }
(rule__MetaMethod__NameAssignment_2)
{ after(grammarAccess.getMetaMethodAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethod__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group__3__Impl
	rule__MetaMethod__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getMetaMethodAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethod__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group__4__Impl
	rule__MetaMethod__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getParametersAssignment_4()); }
(rule__MetaMethod__ParametersAssignment_4)?
{ after(grammarAccess.getMetaMethodAccess().getParametersAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethod__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group__5__Impl
	rule__MetaMethod__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getGroup_5()); }
(rule__MetaMethod__Group_5__0)*
{ after(grammarAccess.getMetaMethodAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethod__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group__6__Impl
	rule__MetaMethod__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getMetaMethodAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethod__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getSemicolonKeyword_7()); }

	';' 

{ after(grammarAccess.getMetaMethodAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__MetaMethod__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group_5__0__Impl
	rule__MetaMethod__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMetaMethodAccess().getCommaKeyword_5_0()); }
(
	',' 
)
{ after(grammarAccess.getMetaMethodAccess().getCommaKeyword_5_0()); }
)
(
{ before(grammarAccess.getMetaMethodAccess().getCommaKeyword_5_0()); }
(
	',' 
)*
{ after(grammarAccess.getMetaMethodAccess().getCommaKeyword_5_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MetaMethod__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MetaMethod__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getParametersAssignment_5_1()); }
(rule__MetaMethod__ParametersAssignment_5_1)
{ after(grammarAccess.getMetaMethodAccess().getParametersAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UserMethod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group__0__Impl
	rule__UserMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getTypeAssignment_0()); }
(rule__UserMethod__TypeAssignment_0)
{ after(grammarAccess.getUserMethodAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMethod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group__1__Impl
	rule__UserMethod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getNameAssignment_1()); }
(rule__UserMethod__NameAssignment_1)
{ after(grammarAccess.getUserMethodAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMethod__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group__2__Impl
	rule__UserMethod__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getUserMethodAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMethod__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group__3__Impl
	rule__UserMethod__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getParametersAssignment_3()); }
(rule__UserMethod__ParametersAssignment_3)?
{ after(grammarAccess.getUserMethodAccess().getParametersAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMethod__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group__4__Impl
	rule__UserMethod__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getGroup_4()); }
(rule__UserMethod__Group_4__0)*
{ after(grammarAccess.getUserMethodAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMethod__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group__5__Impl
	rule__UserMethod__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getUserMethodAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMethod__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getBlAssignment_6()); }
(rule__UserMethod__BlAssignment_6)
{ after(grammarAccess.getUserMethodAccess().getBlAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__UserMethod__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group_4__0__Impl
	rule__UserMethod__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getUserMethodAccess().getCommaKeyword_4_0()); }
(
	',' 
)
{ after(grammarAccess.getUserMethodAccess().getCommaKeyword_4_0()); }
)
(
{ before(grammarAccess.getUserMethodAccess().getCommaKeyword_4_0()); }
(
	',' 
)*
{ after(grammarAccess.getUserMethodAccess().getCommaKeyword_4_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserMethod__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserMethod__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getParametersAssignment_4_1()); }
(rule__UserMethod__ParametersAssignment_4_1)
{ after(grammarAccess.getUserMethodAccess().getParametersAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Bool__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool__Group__0__Impl
	rule__Bool__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getVarleftAssignment_0()); }
(rule__Bool__VarleftAssignment_0)
{ after(grammarAccess.getBoolAccess().getVarleftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool__Group__1__Impl
	rule__Bool__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getGroup_1()); }
(rule__Bool__Group_1__0)?
{ after(grammarAccess.getBoolAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getGroup_2()); }
(rule__Bool__Group_2__0)?
{ after(grammarAccess.getBoolAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Bool__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool__Group_1__0__Impl
	rule__Bool__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getOpAssignment_1_0()); }
(rule__Bool__OpAssignment_1_0)
{ after(grammarAccess.getBoolAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getVarrightAssignment_1_1()); }
(rule__Bool__VarrightAssignment_1_1)
{ after(grammarAccess.getBoolAccess().getVarrightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Bool__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool__Group_2__0__Impl
	rule__Bool__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getBopAssignment_2_0()); }
(rule__Bool__BopAssignment_2_0)
{ after(grammarAccess.getBoolAccess().getBopAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bool__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getBnextAssignment_2_1()); }
(rule__Bool__BnextAssignment_2_1)
{ after(grammarAccess.getBoolAccess().getBnextAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__If__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExAssignment_2()); }
(rule__If__ExAssignment_2)
{ after(grammarAccess.getIfAccess().getExAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getBlAssignment_4()); }
(rule__If__BlAssignment_4)
{ after(grammarAccess.getIfAccess().getBlAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Else__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Else__Group__0__Impl
	rule__Else__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseAccess().getElseKeyword_0()); }

	'else' 

{ after(grammarAccess.getElseAccess().getElseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Else__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Else__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Else__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseAccess().getExAssignment_1()); }
(rule__Else__ExAssignment_1)
{ after(grammarAccess.getElseAccess().getExAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__For__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getInitAssignment_2()); }
(rule__For__InitAssignment_2)
{ after(grammarAccess.getForAccess().getInitAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getForAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getCheckAssignment_4()); }
(rule__For__CheckAssignment_4)
{ after(grammarAccess.getForAccess().getCheckAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__5__Impl
	rule__For__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getForAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__6__Impl
	rule__For__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getActionAssignment_6()); }
(rule__For__ActionAssignment_6)
{ after(grammarAccess.getForAccess().getActionAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__7__Impl
	rule__For__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getForAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getBlAssignment_8()); }
(rule__For__BlAssignment_8)
{ after(grammarAccess.getForAccess().getBlAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__While__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExAssignment_2()); }
(rule__While__ExAssignment_2)
{ after(grammarAccess.getWhileAccess().getExAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getBlAssignment_4()); }
(rule__While__BlAssignment_4)
{ after(grammarAccess.getWhileAccess().getBlAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
(rule__Declaration__TypeAssignment_0)
{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getNameAssignment_1()); }
(rule__Declaration__NameAssignment_1)
{ after(grammarAccess.getDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Return__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Return__Group__0__Impl
	rule__Return__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnAccess().getReturnKeyword_0()); }

	'return' 

{ after(grammarAccess.getReturnAccess().getReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Return__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Return__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Return__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnAccess().getValAssignment_1()); }
(rule__Return__ValAssignment_1)
{ after(grammarAccess.getReturnAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__CLfile__ScriptsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCLfileAccess().getScriptsScriptParserRuleCall_0_0()); }
	ruleScript{ after(grammarAccess.getCLfileAccess().getScriptsScriptParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CLfile__MetsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCLfileAccess().getMetsMetaMethodsParserRuleCall_1_0()); }
	ruleMetaMethods{ after(grammarAccess.getCLfileAccess().getMetsMetaMethodsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getNameCAPITALFIRSTTerminalRuleCall_1_0()); }
	RULE_CAPITALFIRST{ after(grammarAccess.getScriptAccess().getNameCAPITALFIRSTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__RobottypesAssignment_3_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRobottypesLOWERFIRSTTerminalRuleCall_3_0_1_0()); }
	RULE_LOWERFIRST{ after(grammarAccess.getScriptAccess().getRobottypesLOWERFIRSTTerminalRuleCall_3_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__RobotconfigsAssignment_3_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRobotconfigsLOWERFIRSTTerminalRuleCall_3_0_3_0()); }
	RULE_LOWERFIRST{ after(grammarAccess.getScriptAccess().getRobotconfigsLOWERFIRSTTerminalRuleCall_3_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__RobottypesAssignment_3_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRobottypesLOWERFIRSTTerminalRuleCall_3_1_1_1_0()); }
	RULE_LOWERFIRST{ after(grammarAccess.getScriptAccess().getRobottypesLOWERFIRSTTerminalRuleCall_3_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__RobotconfigsAssignment_3_1_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getRobotconfigsLOWERFIRSTTerminalRuleCall_3_1_1_3_0()); }
	RULE_LOWERFIRST{ after(grammarAccess.getScriptAccess().getRobotconfigsLOWERFIRSTTerminalRuleCall_3_1_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__MethodsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getMethodsUserMethodParserRuleCall_6_0()); }
	ruleUserMethod{ after(grammarAccess.getScriptAccess().getMethodsUserMethodParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethods__MethodsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodsAccess().getMethodsMetaMethodParserRuleCall_3_0()); }
	ruleMetaMethod{ after(grammarAccess.getMetaMethodsAccess().getMethodsMetaMethodParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__ExsAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getExsSimpleExpressionParserRuleCall_2_0_0_0()); }
	ruleSimpleExpression{ after(grammarAccess.getBlockAccess().getExsSimpleExpressionParserRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__ExsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getExsStructureExpressionParserRuleCall_2_1_0()); }
	ruleStructureExpression{ after(grammarAccess.getBlockAccess().getExsStructureExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariAlternatives_0_0()); }
(rule__Assignment__VariAlternatives_0_0)
{ after(grammarAccess.getAssignmentAccess().getVariAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_1_1_0()); }
	ruleValue{ after(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParametersValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getCallAccess().getParametersValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ParametersAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getParametersValueParserRuleCall_3_1_0()); }
	ruleValue{ after(grammarAccess.getCallAccess().getParametersValueParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getTypeMethodtypeParserRuleCall_1_0()); }
	ruleMethodtype{ after(grammarAccess.getMetaMethodAccess().getTypeMethodtypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getNameCAPITALFIRSTTerminalRuleCall_2_0()); }
	RULE_CAPITALFIRST{ after(grammarAccess.getMetaMethodAccess().getNameCAPITALFIRSTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__ParametersAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getParametersDeclarationParserRuleCall_4_0()); }
	ruleDeclaration{ after(grammarAccess.getMetaMethodAccess().getParametersDeclarationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethod__ParametersAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodAccess().getParametersDeclarationParserRuleCall_5_1_0()); }
	ruleDeclaration{ after(grammarAccess.getMetaMethodAccess().getParametersDeclarationParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getTypeMethodtypeParserRuleCall_0_0()); }
	ruleMethodtype{ after(grammarAccess.getUserMethodAccess().getTypeMethodtypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getNameLOWERFIRSTTerminalRuleCall_1_0()); }
	RULE_LOWERFIRST{ after(grammarAccess.getUserMethodAccess().getNameLOWERFIRSTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__ParametersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getParametersDeclarationParserRuleCall_3_0()); }
	ruleDeclaration{ after(grammarAccess.getUserMethodAccess().getParametersDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__ParametersAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getParametersDeclarationParserRuleCall_4_1_0()); }
	ruleDeclaration{ after(grammarAccess.getUserMethodAccess().getParametersDeclarationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethod__BlAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodAccess().getBlBlockParserRuleCall_6_0()); }
	ruleBlock{ after(grammarAccess.getUserMethodAccess().getBlBlockParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserMethodCall__MethodAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserMethodCallAccess().getMethodMethodCrossReference_0()); }
(
{ before(grammarAccess.getUserMethodCallAccess().getMethodMethodLOWERFIRSTTerminalRuleCall_0_1()); }
	RULE_LOWERFIRST{ after(grammarAccess.getUserMethodCallAccess().getMethodMethodLOWERFIRSTTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getUserMethodCallAccess().getMethodMethodCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MetaMethodCall__MethodAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaMethodCallAccess().getMethodMethodCrossReference_0()); }
(
{ before(grammarAccess.getMetaMethodCallAccess().getMethodMethodCAPITALFIRSTTerminalRuleCall_0_1()); }
	RULE_CAPITALFIRST{ after(grammarAccess.getMetaMethodCallAccess().getMethodMethodCAPITALFIRSTTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getMetaMethodCallAccess().getMethodMethodCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Bool__VarleftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getVarleftValueParserRuleCall_0_0()); }
	ruleValue{ after(grammarAccess.getBoolAccess().getVarleftValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getOpComparisonOperatorParserRuleCall_1_0_0()); }
	ruleComparisonOperator{ after(grammarAccess.getBoolAccess().getOpComparisonOperatorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__VarrightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getVarrightValueParserRuleCall_1_1_0()); }
	ruleValue{ after(grammarAccess.getBoolAccess().getVarrightValueParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__BopAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getBopBooleanOperatorParserRuleCall_2_0_0()); }
	ruleBooleanOperator{ after(grammarAccess.getBoolAccess().getBopBooleanOperatorParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__BnextAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getBnextBoolParserRuleCall_2_1_0()); }
	ruleBool{ after(grammarAccess.getBoolAccess().getBnextBoolParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__ExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getExBoolParserRuleCall_2_0()); }
	ruleBool{ after(grammarAccess.getIfAccess().getExBoolParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If__BlAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfAccess().getBlBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getIfAccess().getBlBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Else__ExAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseAccess().getExExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getElseAccess().getExExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__InitAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getInitExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getForAccess().getInitExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__CheckAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getCheckBoolParserRuleCall_4_0()); }
	ruleBool{ after(grammarAccess.getForAccess().getCheckBoolParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__ActionAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getActionExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getForAccess().getActionExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For__BlAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAccess().getBlBlockParserRuleCall_8_0()); }
	ruleBlock{ after(grammarAccess.getForAccess().getBlBlockParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__ExAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getExBoolParserRuleCall_2_0()); }
	ruleBool{ after(grammarAccess.getWhileAccess().getExBoolParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While__BlAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileAccess().getBlBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getWhileAccess().getBlBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
(rule__BooleanValue__ValueAlternatives_0)
{ after(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberValueAccess().getValueINTSTRINGParserRuleCall_0()); }
	ruleINTSTRING{ after(grammarAccess.getNumberValueAccess().getValueINTSTRINGParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarReference__VariAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarReferenceAccess().getVariDeclarationCrossReference_0()); }
(
{ before(grammarAccess.getVarReferenceAccess().getVariDeclarationLOWERFIRSTTerminalRuleCall_0_1()); }
	RULE_LOWERFIRST{ after(grammarAccess.getVarReferenceAccess().getVariDeclarationLOWERFIRSTTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVarReferenceAccess().getVariDeclarationCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeDatatypeParserRuleCall_0_0()); }
	ruleDatatype{ after(grammarAccess.getDeclarationAccess().getTypeDatatypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getNameLOWERFIRSTTerminalRuleCall_1_0()); }
	RULE_LOWERFIRST{ after(grammarAccess.getDeclarationAccess().getNameLOWERFIRSTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Return__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnAccess().getValValueParserRuleCall_1_0()); }
	ruleValue{ after(grammarAccess.getReturnAccess().getValValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LOWERFIRST : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_CAPITALFIRST : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


