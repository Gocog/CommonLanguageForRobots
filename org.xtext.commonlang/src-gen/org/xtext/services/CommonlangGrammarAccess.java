/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CommonlangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CLfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CLfile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScriptsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cScriptsScriptParserRuleCall_0_0 = (RuleCall)cScriptsAssignment_0.eContents().get(0);
		private final Assignment cMetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetsMetaMethodsParserRuleCall_1_0 = (RuleCall)cMetsAssignment_1.eContents().get(0);
		
		//CLfile:
		//	scripts+=Script* mets=MetaMethods;
		@Override public ParserRule getRule() { return rule; }

		//scripts+=Script* mets=MetaMethods
		public Group getGroup() { return cGroup; }

		//scripts+=Script*
		public Assignment getScriptsAssignment_0() { return cScriptsAssignment_0; }

		//Script
		public RuleCall getScriptsScriptParserRuleCall_0_0() { return cScriptsScriptParserRuleCall_0_0; }

		//mets=MetaMethods
		public Assignment getMetsAssignment_1() { return cMetsAssignment_1; }

		//MetaMethods
		public RuleCall getMetsMetaMethodsParserRuleCall_1_0() { return cMetsMetaMethodsParserRuleCall_1_0; }
	}

	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCAPITALFIRSTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTargetsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRobottypesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cRobottypesAlternatives_5_0 = (Alternatives)cRobottypesAssignment_5.eContents().get(0);
		private final RuleCall cRobottypesLOWERFIRSTTerminalRuleCall_5_0_0 = (RuleCall)cRobottypesAlternatives_5_0.eContents().get(0);
		private final RuleCall cRobottypesCAPITALFIRSTTerminalRuleCall_5_0_1 = (RuleCall)cRobottypesAlternatives_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRobotconfigsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cRobotconfigsAlternatives_7_0 = (Alternatives)cRobotconfigsAssignment_7.eContents().get(0);
		private final RuleCall cRobotconfigsLOWERFIRSTTerminalRuleCall_7_0_0 = (RuleCall)cRobotconfigsAlternatives_7_0.eContents().get(0);
		private final RuleCall cRobotconfigsCAPITALFIRSTTerminalRuleCall_7_0_1 = (RuleCall)cRobotconfigsAlternatives_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cRobottypesAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final Alternatives cRobottypesAlternatives_9_2_0 = (Alternatives)cRobottypesAssignment_9_2.eContents().get(0);
		private final RuleCall cRobottypesLOWERFIRSTTerminalRuleCall_9_2_0_0 = (RuleCall)cRobottypesAlternatives_9_2_0.eContents().get(0);
		private final RuleCall cRobottypesCAPITALFIRSTTerminalRuleCall_9_2_0_1 = (RuleCall)cRobottypesAlternatives_9_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cRobotconfigsAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final Alternatives cRobotconfigsAlternatives_9_4_0 = (Alternatives)cRobotconfigsAssignment_9_4.eContents().get(0);
		private final RuleCall cRobotconfigsLOWERFIRSTTerminalRuleCall_9_4_0_0 = (RuleCall)cRobotconfigsAlternatives_9_4_0.eContents().get(0);
		private final RuleCall cRobotconfigsCAPITALFIRSTTerminalRuleCall_9_4_0_1 = (RuleCall)cRobotconfigsAlternatives_9_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMethodsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMethodsUserMethodParserRuleCall_12_0 = (RuleCall)cMethodsAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Script:
		//	"script" name=CAPITALFIRST "targets" "(" "(" robottypes+=(LOWERFIRST | CAPITALFIRST) "," robotconfigs+=(LOWERFIRST |
		//	CAPITALFIRST) ")" ("," "(" robottypes+=(LOWERFIRST | CAPITALFIRST) "," robotconfigs+=(LOWERFIRST | CAPITALFIRST)
		//	")")* ")" "{" methods+=UserMethod* "}";
		@Override public ParserRule getRule() { return rule; }

		//"script" name=CAPITALFIRST "targets" "(" "(" robottypes+=(LOWERFIRST | CAPITALFIRST) "," robotconfigs+=(LOWERFIRST |
		//CAPITALFIRST) ")" ("," "(" robottypes+=(LOWERFIRST | CAPITALFIRST) "," robotconfigs+=(LOWERFIRST | CAPITALFIRST) ")")*
		//")" "{" methods+=UserMethod* "}"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//name=CAPITALFIRST
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//CAPITALFIRST
		public RuleCall getNameCAPITALFIRSTTerminalRuleCall_1_0() { return cNameCAPITALFIRSTTerminalRuleCall_1_0; }

		//"targets"
		public Keyword getTargetsKeyword_2() { return cTargetsKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//robottypes+=(LOWERFIRST | CAPITALFIRST)
		public Assignment getRobottypesAssignment_5() { return cRobottypesAssignment_5; }

		//LOWERFIRST | CAPITALFIRST
		public Alternatives getRobottypesAlternatives_5_0() { return cRobottypesAlternatives_5_0; }

		//LOWERFIRST
		public RuleCall getRobottypesLOWERFIRSTTerminalRuleCall_5_0_0() { return cRobottypesLOWERFIRSTTerminalRuleCall_5_0_0; }

		//CAPITALFIRST
		public RuleCall getRobottypesCAPITALFIRSTTerminalRuleCall_5_0_1() { return cRobottypesCAPITALFIRSTTerminalRuleCall_5_0_1; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//robotconfigs+=(LOWERFIRST | CAPITALFIRST)
		public Assignment getRobotconfigsAssignment_7() { return cRobotconfigsAssignment_7; }

		//LOWERFIRST | CAPITALFIRST
		public Alternatives getRobotconfigsAlternatives_7_0() { return cRobotconfigsAlternatives_7_0; }

		//LOWERFIRST
		public RuleCall getRobotconfigsLOWERFIRSTTerminalRuleCall_7_0_0() { return cRobotconfigsLOWERFIRSTTerminalRuleCall_7_0_0; }

		//CAPITALFIRST
		public RuleCall getRobotconfigsCAPITALFIRSTTerminalRuleCall_7_0_1() { return cRobotconfigsCAPITALFIRSTTerminalRuleCall_7_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//("," "(" robottypes+=(LOWERFIRST | CAPITALFIRST) "," robotconfigs+=(LOWERFIRST | CAPITALFIRST) ")")*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//robottypes+=(LOWERFIRST | CAPITALFIRST)
		public Assignment getRobottypesAssignment_9_2() { return cRobottypesAssignment_9_2; }

		//LOWERFIRST | CAPITALFIRST
		public Alternatives getRobottypesAlternatives_9_2_0() { return cRobottypesAlternatives_9_2_0; }

		//LOWERFIRST
		public RuleCall getRobottypesLOWERFIRSTTerminalRuleCall_9_2_0_0() { return cRobottypesLOWERFIRSTTerminalRuleCall_9_2_0_0; }

		//CAPITALFIRST
		public RuleCall getRobottypesCAPITALFIRSTTerminalRuleCall_9_2_0_1() { return cRobottypesCAPITALFIRSTTerminalRuleCall_9_2_0_1; }

		//","
		public Keyword getCommaKeyword_9_3() { return cCommaKeyword_9_3; }

		//robotconfigs+=(LOWERFIRST | CAPITALFIRST)
		public Assignment getRobotconfigsAssignment_9_4() { return cRobotconfigsAssignment_9_4; }

		//LOWERFIRST | CAPITALFIRST
		public Alternatives getRobotconfigsAlternatives_9_4_0() { return cRobotconfigsAlternatives_9_4_0; }

		//LOWERFIRST
		public RuleCall getRobotconfigsLOWERFIRSTTerminalRuleCall_9_4_0_0() { return cRobotconfigsLOWERFIRSTTerminalRuleCall_9_4_0_0; }

		//CAPITALFIRST
		public RuleCall getRobotconfigsCAPITALFIRSTTerminalRuleCall_9_4_0_1() { return cRobotconfigsCAPITALFIRSTTerminalRuleCall_9_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_9_5() { return cRightParenthesisKeyword_9_5; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//methods+=UserMethod*
		public Assignment getMethodsAssignment_12() { return cMethodsAssignment_12; }

		//UserMethod
		public RuleCall getMethodsUserMethodParserRuleCall_12_0() { return cMethodsUserMethodParserRuleCall_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class MetaMethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaMethods");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMetaMethodsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMetamethodscollectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodsMetaMethodParserRuleCall_3_0 = (RuleCall)cMethodsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MetaMethods:
		//	{MetaMethods} "metamethodscollection" "{" methods+=MetaMethod* "}";
		@Override public ParserRule getRule() { return rule; }

		//{MetaMethods} "metamethodscollection" "{" methods+=MetaMethod* "}"
		public Group getGroup() { return cGroup; }

		//{MetaMethods}
		public Action getMetaMethodsAction_0() { return cMetaMethodsAction_0; }

		//"metamethodscollection"
		public Keyword getMetamethodscollectionKeyword_1() { return cMetamethodscollectionKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//methods+=MetaMethod*
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }

		//MetaMethod
		public RuleCall getMethodsMetaMethodParserRuleCall_3_0() { return cMethodsMetaMethodParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cExsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cExsSimpleExpressionParserRuleCall_2_0_0_0 = (RuleCall)cExsAssignment_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cExsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cExsStructureExpressionParserRuleCall_2_1_0 = (RuleCall)cExsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} "{" (exs+=SimpleExpression ";" | exs+=StructureExpression)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Block} "{" (exs+=SimpleExpression ";" | exs+=StructureExpression)* "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(exs+=SimpleExpression ";" | exs+=StructureExpression)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//exs+=SimpleExpression ";"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//exs+=SimpleExpression
		public Assignment getExsAssignment_2_0_0() { return cExsAssignment_2_0_0; }

		//SimpleExpression
		public RuleCall getExsSimpleExpressionParserRuleCall_2_0_0_0() { return cExsSimpleExpressionParserRuleCall_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1() { return cSemicolonKeyword_2_0_1; }

		//exs+=StructureExpression
		public Assignment getExsAssignment_2_1() { return cExsAssignment_2_1; }

		//StructureExpression
		public RuleCall getExsStructureExpressionParserRuleCall_2_1_0() { return cExsStructureExpressionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCrementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReturnParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleExpression:
		//	Crement | Call | Assignment | Return;
		@Override public ParserRule getRule() { return rule; }

		//Crement | Call | Assignment | Return
		public Alternatives getAlternatives() { return cAlternatives; }

		//Crement
		public RuleCall getCrementParserRuleCall_0() { return cCrementParserRuleCall_0; }

		//Call
		public RuleCall getCallParserRuleCall_1() { return cCallParserRuleCall_1; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_2() { return cAssignmentParserRuleCall_2; }

		//Return
		public RuleCall getReturnParserRuleCall_3() { return cReturnParserRuleCall_3; }
	}

	public class StructureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructureExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//StructureExpression:
		//	Block | If | Else | For | While;
		@Override public ParserRule getRule() { return rule; }

		//Block | If | Else | For | While
		public Alternatives getAlternatives() { return cAlternatives; }

		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }

		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }

		//Else
		public RuleCall getElseParserRuleCall_2() { return cElseParserRuleCall_2; }

		//For
		public RuleCall getForParserRuleCall_3() { return cForParserRuleCall_3; }

		//While
		public RuleCall getWhileParserRuleCall_4() { return cWhileParserRuleCall_4; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructureExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	SimpleExpression | StructureExpression;
		@Override public ParserRule getRule() { return rule; }

		//SimpleExpression | StructureExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_0() { return cSimpleExpressionParserRuleCall_0; }

		//StructureExpression
		public RuleCall getStructureExpressionParserRuleCall_1() { return cStructureExpressionParserRuleCall_1; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cVariAlternatives_0_0 = (Alternatives)cVariAssignment_0.eContents().get(0);
		private final CrossReference cVariDeclarationCrossReference_0_0_0 = (CrossReference)cVariAlternatives_0_0.eContents().get(0);
		private final RuleCall cVariDeclarationLOWERFIRSTTerminalRuleCall_0_0_0_1 = (RuleCall)cVariDeclarationCrossReference_0_0_0.eContents().get(1);
		private final RuleCall cVariDeclarationParserRuleCall_0_0_1 = (RuleCall)cVariAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpMathOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueValueExpressionParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		
		//Assignment:
		//	vari=([Declaration|LOWERFIRST] | Declaration) (=> op=MathOperator? "=" value=ValueExpression);
		@Override public ParserRule getRule() { return rule; }

		//vari=([Declaration|LOWERFIRST] | Declaration) (=> op=MathOperator? "=" value=ValueExpression)
		public Group getGroup() { return cGroup; }

		//vari=([Declaration|LOWERFIRST] | Declaration)
		public Assignment getVariAssignment_0() { return cVariAssignment_0; }

		//([Declaration|LOWERFIRST] | Declaration)
		public Alternatives getVariAlternatives_0_0() { return cVariAlternatives_0_0; }

		//[Declaration|LOWERFIRST]
		public CrossReference getVariDeclarationCrossReference_0_0_0() { return cVariDeclarationCrossReference_0_0_0; }

		//LOWERFIRST
		public RuleCall getVariDeclarationLOWERFIRSTTerminalRuleCall_0_0_0_1() { return cVariDeclarationLOWERFIRSTTerminalRuleCall_0_0_0_1; }

		//Declaration
		public RuleCall getVariDeclarationParserRuleCall_0_0_1() { return cVariDeclarationParserRuleCall_0_0_1; }

		//=> op=MathOperator? "=" value=ValueExpression
		public Group getGroup_1() { return cGroup_1; }

		//=> op=MathOperator?
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//MathOperator
		public RuleCall getOpMathOperatorParserRuleCall_1_0_0() { return cOpMathOperatorParserRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//value=ValueExpression
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//ValueExpression
		public RuleCall getValueValueExpressionParserRuleCall_1_2_0() { return cValueValueExpressionParserRuleCall_1_2_0; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cUserMethodCallParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMetaMethodCallParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersValueExpressionParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersValueExpressionParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call:
		//	(UserMethodCall | MetaMethodCall) "(" parameters+=ValueExpression? (","+ parameters+=ValueExpression)* ")";
		@Override public ParserRule getRule() { return rule; }

		//(UserMethodCall | MetaMethodCall) "(" parameters+=ValueExpression? (","+ parameters+=ValueExpression)* ")"
		public Group getGroup() { return cGroup; }

		//UserMethodCall | MetaMethodCall
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//UserMethodCall
		public RuleCall getUserMethodCallParserRuleCall_0_0() { return cUserMethodCallParserRuleCall_0_0; }

		//MetaMethodCall
		public RuleCall getMetaMethodCallParserRuleCall_0_1() { return cMetaMethodCallParserRuleCall_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters+=ValueExpression?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//ValueExpression
		public RuleCall getParametersValueExpressionParserRuleCall_2_0() { return cParametersValueExpressionParserRuleCall_2_0; }

		//(","+ parameters+=ValueExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","+
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parameters+=ValueExpression
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//ValueExpression
		public RuleCall getParametersValueExpressionParserRuleCall_3_1_0() { return cParametersValueExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMetaMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Method:
		//	UserMethod | MetaMethod;
		@Override public ParserRule getRule() { return rule; }

		//UserMethod | MetaMethod
		public Alternatives getAlternatives() { return cAlternatives; }

		//UserMethod
		public RuleCall getUserMethodParserRuleCall_0() { return cUserMethodParserRuleCall_0; }

		//MetaMethod
		public RuleCall getMetaMethodParserRuleCall_1() { return cMetaMethodParserRuleCall_1; }
	}

	public class MetaMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMethodtypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCAPITALFIRSTTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersDeclarationParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersDeclarationParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MetaMethod:
		//	"meta" type=Methodtype name=CAPITALFIRST "(" parameters+=Declaration? (","+ parameters+=Declaration)* ")" ";";
		@Override public ParserRule getRule() { return rule; }

		//"meta" type=Methodtype name=CAPITALFIRST "(" parameters+=Declaration? (","+ parameters+=Declaration)* ")" ";"
		public Group getGroup() { return cGroup; }

		//"meta"
		public Keyword getMetaKeyword_0() { return cMetaKeyword_0; }

		//type=Methodtype
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Methodtype
		public RuleCall getTypeMethodtypeParserRuleCall_1_0() { return cTypeMethodtypeParserRuleCall_1_0; }

		//name=CAPITALFIRST
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//CAPITALFIRST
		public RuleCall getNameCAPITALFIRSTTerminalRuleCall_2_0() { return cNameCAPITALFIRSTTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameters+=Declaration?
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//Declaration
		public RuleCall getParametersDeclarationParserRuleCall_4_0() { return cParametersDeclarationParserRuleCall_4_0; }

		//(","+ parameters+=Declaration)*
		public Group getGroup_5() { return cGroup_5; }

		//","+
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//parameters+=Declaration
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//Declaration
		public RuleCall getParametersDeclarationParserRuleCall_5_1_0() { return cParametersDeclarationParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class UserMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeMethodtypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWERFIRSTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersDeclarationParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersDeclarationParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlBlockParserRuleCall_6_0 = (RuleCall)cBlAssignment_6.eContents().get(0);
		
		//UserMethod:
		//	type=Methodtype name=LOWERFIRST "(" parameters+=Declaration? (","+ parameters+=Declaration)* ")" bl=Block;
		@Override public ParserRule getRule() { return rule; }

		//type=Methodtype name=LOWERFIRST "(" parameters+=Declaration? (","+ parameters+=Declaration)* ")" bl=Block
		public Group getGroup() { return cGroup; }

		//type=Methodtype
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Methodtype
		public RuleCall getTypeMethodtypeParserRuleCall_0_0() { return cTypeMethodtypeParserRuleCall_0_0; }

		//name=LOWERFIRST
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LOWERFIRST
		public RuleCall getNameLOWERFIRSTTerminalRuleCall_1_0() { return cNameLOWERFIRSTTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=Declaration?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//Declaration
		public RuleCall getParametersDeclarationParserRuleCall_3_0() { return cParametersDeclarationParserRuleCall_3_0; }

		//(","+ parameters+=Declaration)*
		public Group getGroup_4() { return cGroup_4; }

		//","+
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameters+=Declaration
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Declaration
		public RuleCall getParametersDeclarationParserRuleCall_4_1_0() { return cParametersDeclarationParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//bl=Block
		public Assignment getBlAssignment_6() { return cBlAssignment_6; }

		//Block
		public RuleCall getBlBlockParserRuleCall_6_0() { return cBlBlockParserRuleCall_6_0; }
	}

	public class UserMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserMethodCall");
		private final Assignment cMethodAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMethodMethodCrossReference_0 = (CrossReference)cMethodAssignment.eContents().get(0);
		private final RuleCall cMethodMethodLOWERFIRSTTerminalRuleCall_0_1 = (RuleCall)cMethodMethodCrossReference_0.eContents().get(1);
		
		//UserMethodCall:
		//	method=[Method|LOWERFIRST];
		@Override public ParserRule getRule() { return rule; }

		//method=[Method|LOWERFIRST]
		public Assignment getMethodAssignment() { return cMethodAssignment; }

		//[Method|LOWERFIRST]
		public CrossReference getMethodMethodCrossReference_0() { return cMethodMethodCrossReference_0; }

		//LOWERFIRST
		public RuleCall getMethodMethodLOWERFIRSTTerminalRuleCall_0_1() { return cMethodMethodLOWERFIRSTTerminalRuleCall_0_1; }
	}

	public class MetaMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaMethodCall");
		private final Assignment cMethodAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMethodMethodCrossReference_0 = (CrossReference)cMethodAssignment.eContents().get(0);
		private final RuleCall cMethodMethodCAPITALFIRSTTerminalRuleCall_0_1 = (RuleCall)cMethodMethodCrossReference_0.eContents().get(1);
		
		//MetaMethodCall:
		//	method=[Method|CAPITALFIRST];
		@Override public ParserRule getRule() { return rule; }

		//method=[Method|CAPITALFIRST]
		public Assignment getMethodAssignment() { return cMethodAssignment; }

		//[Method|CAPITALFIRST]
		public CrossReference getMethodMethodCrossReference_0() { return cMethodMethodCrossReference_0; }

		//CAPITALFIRST
		public RuleCall getMethodMethodCAPITALFIRSTTerminalRuleCall_0_1() { return cMethodMethodCAPITALFIRSTTerminalRuleCall_0_1; }
	}

	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarleftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarleftValueExpressionParserRuleCall_0_0 = (RuleCall)cVarleftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpComparisonOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cVarrightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarrightValueExpressionParserRuleCall_1_1_0 = (RuleCall)cVarrightAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBopAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBopBooleanOperatorParserRuleCall_2_0_0 = (RuleCall)cBopAssignment_2_0.eContents().get(0);
		private final Assignment cBnextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBnextBoolParserRuleCall_2_1_0 = (RuleCall)cBnextAssignment_2_1.eContents().get(0);
		
		//Bool:
		//	varleft=ValueExpression (=> op=ComparisonOperator varright=ValueExpression)? (bop=BooleanOperator bnext=Bool)?;
		@Override public ParserRule getRule() { return rule; }

		//varleft=ValueExpression (=> op=ComparisonOperator varright=ValueExpression)? (bop=BooleanOperator bnext=Bool)?
		public Group getGroup() { return cGroup; }

		//varleft=ValueExpression
		public Assignment getVarleftAssignment_0() { return cVarleftAssignment_0; }

		//ValueExpression
		public RuleCall getVarleftValueExpressionParserRuleCall_0_0() { return cVarleftValueExpressionParserRuleCall_0_0; }

		//(=> op=ComparisonOperator varright=ValueExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> op=ComparisonOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//ComparisonOperator
		public RuleCall getOpComparisonOperatorParserRuleCall_1_0_0() { return cOpComparisonOperatorParserRuleCall_1_0_0; }

		//varright=ValueExpression
		public Assignment getVarrightAssignment_1_1() { return cVarrightAssignment_1_1; }

		//ValueExpression
		public RuleCall getVarrightValueExpressionParserRuleCall_1_1_0() { return cVarrightValueExpressionParserRuleCall_1_1_0; }

		//(bop=BooleanOperator bnext=Bool)?
		public Group getGroup_2() { return cGroup_2; }

		//bop=BooleanOperator
		public Assignment getBopAssignment_2_0() { return cBopAssignment_2_0; }

		//BooleanOperator
		public RuleCall getBopBooleanOperatorParserRuleCall_2_0_0() { return cBopBooleanOperatorParserRuleCall_2_0_0; }

		//bnext=Bool
		public Assignment getBnextAssignment_2_1() { return cBnextAssignment_2_1; }

		//Bool
		public RuleCall getBnextBoolParserRuleCall_2_1_0() { return cBnextBoolParserRuleCall_2_1_0; }
	}

	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarleftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarleftValueParserRuleCall_0_0 = (RuleCall)cVarleftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpMathOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cVarrightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarrightValueExpressionParserRuleCall_1_1_0 = (RuleCall)cVarrightAssignment_1_1.eContents().get(0);
		
		//ValueExpression:
		//	varleft=Value (=> op=MathOperator varright=ValueExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//varleft=Value (=> op=MathOperator varright=ValueExpression)?
		public Group getGroup() { return cGroup; }

		//varleft=Value
		public Assignment getVarleftAssignment_0() { return cVarleftAssignment_0; }

		//Value
		public RuleCall getVarleftValueParserRuleCall_0_0() { return cVarleftValueParserRuleCall_0_0; }

		//(=> op=MathOperator varright=ValueExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> op=MathOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//MathOperator
		public RuleCall getOpMathOperatorParserRuleCall_1_0_0() { return cOpMathOperatorParserRuleCall_1_0_0; }

		//varright=ValueExpression
		public Assignment getVarrightAssignment_1_1() { return cVarrightAssignment_1_1; }

		//ValueExpression
		public RuleCall getVarrightValueExpressionParserRuleCall_1_1_0() { return cVarrightValueExpressionParserRuleCall_1_1_0; }
	}

	public class CrementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Crement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueVarReferenceParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpCrementOperatorParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//Crement:
		//	value=VarReference op=CrementOperator;
		@Override public ParserRule getRule() { return rule; }

		//value=VarReference op=CrementOperator
		public Group getGroup() { return cGroup; }

		//value=VarReference
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//VarReference
		public RuleCall getValueVarReferenceParserRuleCall_0_0() { return cValueVarReferenceParserRuleCall_0_0; }

		//op=CrementOperator
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//CrementOperator
		public RuleCall getOpCrementOperatorParserRuleCall_1_0() { return cOpCrementOperatorParserRuleCall_1_0; }
	}

	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ComparisonOperator:
		//	"==" | "!=" | "<" | ">" | "<=" | ">=";
		@Override public ParserRule getRule() { return rule; }

		//"==" | "!=" | "<" | ">" | "<=" | ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}

	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkAmpersandAmpersandKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkVerticalLineVerticalLineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BooleanOperator:
		//	"&&" | "||" | "!&&" | "!||";
		@Override public ParserRule getRule() { return rule; }

		//"&&" | "||" | "!&&" | "!||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }

		//"!&&"
		public Keyword getExclamationMarkAmpersandAmpersandKeyword_2() { return cExclamationMarkAmpersandAmpersandKeyword_2; }

		//"!||"
		public Keyword getExclamationMarkVerticalLineVerticalLineKeyword_3() { return cExclamationMarkVerticalLineVerticalLineKeyword_3; }
	}

	public class MathOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//MathOperator:
		//	"+" | "-" | "*" | "/";
		@Override public ParserRule getRule() { return rule; }

		//"+" | "-" | "*" | "/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}

	public class CrementOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CrementOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CrementOperator:
		//	"++" | "--";
		@Override public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExBoolParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlBlockParserRuleCall_4_0 = (RuleCall)cBlAssignment_4.eContents().get(0);
		
		//If:
		//	"if" "(" ex=Bool ")" bl=Block;
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" ex=Bool ")" bl=Block
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=Bool
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//Bool
		public RuleCall getExBoolParserRuleCall_2_0() { return cExBoolParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//bl=Block
		public Assignment getBlAssignment_4() { return cBlAssignment_4; }

		//Block
		public RuleCall getBlBlockParserRuleCall_4_0() { return cBlBlockParserRuleCall_4_0; }
	}

	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExExpressionParserRuleCall_1_0 = (RuleCall)cExAssignment_1.eContents().get(0);
		
		//Else:
		//	"else" ex=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"else" ex=Expression
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//ex=Expression
		public Assignment getExAssignment_1() { return cExAssignment_1; }

		//Expression
		public RuleCall getExExpressionParserRuleCall_1_0() { return cExExpressionParserRuleCall_1_0; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitSimpleExpressionParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCheckAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCheckBoolParserRuleCall_4_0 = (RuleCall)cCheckAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActionSimpleExpressionParserRuleCall_6_0 = (RuleCall)cActionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBlAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlBlockParserRuleCall_8_0 = (RuleCall)cBlAssignment_8.eContents().get(0);
		
		//For:
		//	"for" "(" init=SimpleExpression ";" check=Bool ";" action=SimpleExpression ")" bl=Block;
		@Override public ParserRule getRule() { return rule; }

		//"for" "(" init=SimpleExpression ";" check=Bool ";" action=SimpleExpression ")" bl=Block
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//init=SimpleExpression
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }

		//SimpleExpression
		public RuleCall getInitSimpleExpressionParserRuleCall_2_0() { return cInitSimpleExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//check=Bool
		public Assignment getCheckAssignment_4() { return cCheckAssignment_4; }

		//Bool
		public RuleCall getCheckBoolParserRuleCall_4_0() { return cCheckBoolParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//action=SimpleExpression
		public Assignment getActionAssignment_6() { return cActionAssignment_6; }

		//SimpleExpression
		public RuleCall getActionSimpleExpressionParserRuleCall_6_0() { return cActionSimpleExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//bl=Block
		public Assignment getBlAssignment_8() { return cBlAssignment_8; }

		//Block
		public RuleCall getBlBlockParserRuleCall_8_0() { return cBlBlockParserRuleCall_8_0; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExBoolParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlBlockParserRuleCall_4_0 = (RuleCall)cBlAssignment_4.eContents().get(0);
		
		//While:
		//	"while" "(" ex=Bool ")" bl=Block;
		@Override public ParserRule getRule() { return rule; }

		//"while" "(" ex=Bool ")" bl=Block
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ex=Bool
		public Assignment getExAssignment_2() { return cExAssignment_2; }

		//Bool
		public RuleCall getExBoolParserRuleCall_2_0() { return cExBoolParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//bl=Block
		public Assignment getBlAssignment_4() { return cBlAssignment_4; }

		//Block
		public RuleCall getBlBlockParserRuleCall_4_0() { return cBlBlockParserRuleCall_4_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBasicValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	Call | VarReference | BasicValue;
		@Override public ParserRule getRule() { return rule; }

		//Call | VarReference | BasicValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Call
		public RuleCall getCallParserRuleCall_0() { return cCallParserRuleCall_0; }

		//VarReference
		public RuleCall getVarReferenceParserRuleCall_1() { return cVarReferenceParserRuleCall_1; }

		//BasicValue
		public RuleCall getBasicValueParserRuleCall_2() { return cBasicValueParserRuleCall_2; }
	}

	public class BasicValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BasicValue:
		//	BooleanValue | NumberValue | StringValue;
		@Override public ParserRule getRule() { return rule; }

		//BooleanValue | NumberValue | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_0() { return cBooleanValueParserRuleCall_0; }

		//NumberValue
		public RuleCall getNumberValueParserRuleCall_1() { return cNumberValueParserRuleCall_1; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//	value=("true" | "false");
		@Override public ParserRule getRule() { return rule; }

		//value=("true" | "false")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"true" | "false"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTSTRINGParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberValue:
		//	value=INTSTRING;
		@Override public ParserRule getRule() { return rule; }

		//value=INTSTRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INTSTRING
		public RuleCall getValueINTSTRINGParserRuleCall_0() { return cValueINTSTRINGParserRuleCall_0; }
	}

	public class VarReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarReference");
		private final Assignment cVariAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariDeclarationCrossReference_0 = (CrossReference)cVariAssignment.eContents().get(0);
		private final RuleCall cVariDeclarationLOWERFIRSTTerminalRuleCall_0_1 = (RuleCall)cVariDeclarationCrossReference_0.eContents().get(1);
		
		//VarReference:
		//	vari=[Declaration|LOWERFIRST];
		@Override public ParserRule getRule() { return rule; }

		//vari=[Declaration|LOWERFIRST]
		public Assignment getVariAssignment() { return cVariAssignment; }

		//[Declaration|LOWERFIRST]
		public CrossReference getVariDeclarationCrossReference_0() { return cVariDeclarationCrossReference_0; }

		//LOWERFIRST
		public RuleCall getVariDeclarationLOWERFIRSTTerminalRuleCall_0_1() { return cVariDeclarationLOWERFIRSTTerminalRuleCall_0_1; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDatatypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWERFIRSTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Declaration:
		//	type=Datatype name=LOWERFIRST;
		@Override public ParserRule getRule() { return rule; }

		//type=Datatype name=LOWERFIRST
		public Group getGroup() { return cGroup; }

		//type=Datatype
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Datatype
		public RuleCall getTypeDatatypeParserRuleCall_0_0() { return cTypeDatatypeParserRuleCall_0_0; }

		//name=LOWERFIRST
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LOWERFIRST
		public RuleCall getNameLOWERFIRSTTerminalRuleCall_1_0() { return cNameLOWERFIRSTTerminalRuleCall_1_0; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValValueExpressionParserRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Return:
		//	"return" val=ValueExpression;
		@Override public ParserRule getRule() { return rule; }

		//"return" val=ValueExpression
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//val=ValueExpression
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//ValueExpression
		public RuleCall getValValueExpressionParserRuleCall_1_0() { return cValValueExpressionParserRuleCall_1_0; }
	}

	public class MethodtypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Methodtype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cDatatypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Methodtype:
		//	"void" | Datatype;
		@Override public ParserRule getRule() { return rule; }

		//"void" | Datatype
		public Alternatives getAlternatives() { return cAlternatives; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//Datatype
		public RuleCall getDatatypeParserRuleCall_1() { return cDatatypeParserRuleCall_1; }
	}

	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Datatype:
		//	"int" | "string" | "boolean";
		@Override public ParserRule getRule() { return rule; }

		//"int" | "string" | "boolean"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//"boolean"
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
	}

	public class INTSTRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTSTRING");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTSTRING:
		//	INT;
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final CLfileElements pCLfile;
	private final ScriptElements pScript;
	private final MetaMethodsElements pMetaMethods;
	private final BlockElements pBlock;
	private final SimpleExpressionElements pSimpleExpression;
	private final StructureExpressionElements pStructureExpression;
	private final ExpressionElements pExpression;
	private final AssignmentElements pAssignment;
	private final CallElements pCall;
	private final MethodElements pMethod;
	private final MetaMethodElements pMetaMethod;
	private final UserMethodElements pUserMethod;
	private final UserMethodCallElements pUserMethodCall;
	private final MetaMethodCallElements pMetaMethodCall;
	private final TerminalRule tLOWERFIRST;
	private final TerminalRule tCAPITALFIRST;
	private final BoolElements pBool;
	private final ValueExpressionElements pValueExpression;
	private final CrementElements pCrement;
	private final ComparisonOperatorElements pComparisonOperator;
	private final BooleanOperatorElements pBooleanOperator;
	private final MathOperatorElements pMathOperator;
	private final CrementOperatorElements pCrementOperator;
	private final IfElements pIf;
	private final ElseElements pElse;
	private final ForElements pFor;
	private final WhileElements pWhile;
	private final ValueElements pValue;
	private final BasicValueElements pBasicValue;
	private final BooleanValueElements pBooleanValue;
	private final StringValueElements pStringValue;
	private final NumberValueElements pNumberValue;
	private final VarReferenceElements pVarReference;
	private final DeclarationElements pDeclaration;
	private final ReturnElements pReturn;
	private final MethodtypeElements pMethodtype;
	private final DatatypeElements pDatatype;
	private final INTSTRINGElements pINTSTRING;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CommonlangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCLfile = new CLfileElements();
		this.pScript = new ScriptElements();
		this.pMetaMethods = new MetaMethodsElements();
		this.pBlock = new BlockElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pStructureExpression = new StructureExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pCall = new CallElements();
		this.pMethod = new MethodElements();
		this.pMetaMethod = new MetaMethodElements();
		this.pUserMethod = new UserMethodElements();
		this.pUserMethodCall = new UserMethodCallElements();
		this.pMetaMethodCall = new MetaMethodCallElements();
		this.tLOWERFIRST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOWERFIRST");
		this.tCAPITALFIRST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CAPITALFIRST");
		this.pBool = new BoolElements();
		this.pValueExpression = new ValueExpressionElements();
		this.pCrement = new CrementElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.pBooleanOperator = new BooleanOperatorElements();
		this.pMathOperator = new MathOperatorElements();
		this.pCrementOperator = new CrementOperatorElements();
		this.pIf = new IfElements();
		this.pElse = new ElseElements();
		this.pFor = new ForElements();
		this.pWhile = new WhileElements();
		this.pValue = new ValueElements();
		this.pBasicValue = new BasicValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pStringValue = new StringValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pVarReference = new VarReferenceElements();
		this.pDeclaration = new DeclarationElements();
		this.pReturn = new ReturnElements();
		this.pMethodtype = new MethodtypeElements();
		this.pDatatype = new DatatypeElements();
		this.pINTSTRING = new INTSTRINGElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Commonlang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CLfile:
	//	scripts+=Script* mets=MetaMethods;
	public CLfileElements getCLfileAccess() {
		return pCLfile;
	}
	
	public ParserRule getCLfileRule() {
		return getCLfileAccess().getRule();
	}

	//Script:
	//	"script" name=CAPITALFIRST "targets" "(" "(" robottypes+=(LOWERFIRST | CAPITALFIRST) "," robotconfigs+=(LOWERFIRST |
	//	CAPITALFIRST) ")" ("," "(" robottypes+=(LOWERFIRST | CAPITALFIRST) "," robotconfigs+=(LOWERFIRST | CAPITALFIRST)
	//	")")* ")" "{" methods+=UserMethod* "}";
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//MetaMethods:
	//	{MetaMethods} "metamethodscollection" "{" methods+=MetaMethod* "}";
	public MetaMethodsElements getMetaMethodsAccess() {
		return pMetaMethods;
	}
	
	public ParserRule getMetaMethodsRule() {
		return getMetaMethodsAccess().getRule();
	}

	//Block:
	//	{Block} "{" (exs+=SimpleExpression ";" | exs+=StructureExpression)* "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//SimpleExpression:
	//	Crement | Call | Assignment | Return;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//StructureExpression:
	//	Block | If | Else | For | While;
	public StructureExpressionElements getStructureExpressionAccess() {
		return pStructureExpression;
	}
	
	public ParserRule getStructureExpressionRule() {
		return getStructureExpressionAccess().getRule();
	}

	//Expression:
	//	SimpleExpression | StructureExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Assignment:
	//	vari=([Declaration|LOWERFIRST] | Declaration) (=> op=MathOperator? "=" value=ValueExpression);
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Call:
	//	(UserMethodCall | MetaMethodCall) "(" parameters+=ValueExpression? (","+ parameters+=ValueExpression)* ")";
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Method:
	//	UserMethod | MetaMethod;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//MetaMethod:
	//	"meta" type=Methodtype name=CAPITALFIRST "(" parameters+=Declaration? (","+ parameters+=Declaration)* ")" ";";
	public MetaMethodElements getMetaMethodAccess() {
		return pMetaMethod;
	}
	
	public ParserRule getMetaMethodRule() {
		return getMetaMethodAccess().getRule();
	}

	//UserMethod:
	//	type=Methodtype name=LOWERFIRST "(" parameters+=Declaration? (","+ parameters+=Declaration)* ")" bl=Block;
	public UserMethodElements getUserMethodAccess() {
		return pUserMethod;
	}
	
	public ParserRule getUserMethodRule() {
		return getUserMethodAccess().getRule();
	}

	//UserMethodCall:
	//	method=[Method|LOWERFIRST];
	public UserMethodCallElements getUserMethodCallAccess() {
		return pUserMethodCall;
	}
	
	public ParserRule getUserMethodCallRule() {
		return getUserMethodCallAccess().getRule();
	}

	//MetaMethodCall:
	//	method=[Method|CAPITALFIRST];
	public MetaMethodCallElements getMetaMethodCallAccess() {
		return pMetaMethodCall;
	}
	
	public ParserRule getMetaMethodCallRule() {
		return getMetaMethodCallAccess().getRule();
	}

	//terminal LOWERFIRST:
	//	"a".."z" ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getLOWERFIRSTRule() {
		return tLOWERFIRST;
	} 

	//terminal CAPITALFIRST:
	//	"A".."Z" ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getCAPITALFIRSTRule() {
		return tCAPITALFIRST;
	} 

	//Bool:
	//	varleft=ValueExpression (=> op=ComparisonOperator varright=ValueExpression)? (bop=BooleanOperator bnext=Bool)?;
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//ValueExpression:
	//	varleft=Value (=> op=MathOperator varright=ValueExpression)?;
	public ValueExpressionElements getValueExpressionAccess() {
		return pValueExpression;
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//Crement:
	//	value=VarReference op=CrementOperator;
	public CrementElements getCrementAccess() {
		return pCrement;
	}
	
	public ParserRule getCrementRule() {
		return getCrementAccess().getRule();
	}

	//ComparisonOperator:
	//	"==" | "!=" | "<" | ">" | "<=" | ">=";
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}

	//BooleanOperator:
	//	"&&" | "||" | "!&&" | "!||";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return pBooleanOperator;
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}

	//MathOperator:
	//	"+" | "-" | "*" | "/";
	public MathOperatorElements getMathOperatorAccess() {
		return pMathOperator;
	}
	
	public ParserRule getMathOperatorRule() {
		return getMathOperatorAccess().getRule();
	}

	//CrementOperator:
	//	"++" | "--";
	public CrementOperatorElements getCrementOperatorAccess() {
		return pCrementOperator;
	}
	
	public ParserRule getCrementOperatorRule() {
		return getCrementOperatorAccess().getRule();
	}

	//If:
	//	"if" "(" ex=Bool ")" bl=Block;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//Else:
	//	"else" ex=Expression;
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}

	//For:
	//	"for" "(" init=SimpleExpression ";" check=Bool ";" action=SimpleExpression ")" bl=Block;
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//While:
	//	"while" "(" ex=Bool ")" bl=Block;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//Value:
	//	Call | VarReference | BasicValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//BasicValue:
	//	BooleanValue | NumberValue | StringValue;
	public BasicValueElements getBasicValueAccess() {
		return pBasicValue;
	}
	
	public ParserRule getBasicValueRule() {
		return getBasicValueAccess().getRule();
	}

	//BooleanValue:
	//	value=("true" | "false");
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//NumberValue:
	//	value=INTSTRING;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//VarReference:
	//	vari=[Declaration|LOWERFIRST];
	public VarReferenceElements getVarReferenceAccess() {
		return pVarReference;
	}
	
	public ParserRule getVarReferenceRule() {
		return getVarReferenceAccess().getRule();
	}

	//Declaration:
	//	type=Datatype name=LOWERFIRST;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Return:
	//	"return" val=ValueExpression;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//Methodtype:
	//	"void" | Datatype;
	public MethodtypeElements getMethodtypeAccess() {
		return pMethodtype;
	}
	
	public ParserRule getMethodtypeRule() {
		return getMethodtypeAccess().getRule();
	}

	//Datatype:
	//	"int" | "string" | "boolean";
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	//INTSTRING:
	//	INT;
	public INTSTRINGElements getINTSTRINGAccess() {
		return pINTSTRING;
	}
	
	public ParserRule getINTSTRINGRule() {
		return getINTSTRINGAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
