/*
 * generated by Xtext
 */
grammar InternalCommonlang;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.CommonlangGrammarAccess;

}

@parser::members {

 	private CommonlangGrammarAccess grammarAccess;
 	
    public InternalCommonlangParser(TokenStream input, CommonlangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CLfile";	
   	}
   	
   	@Override
   	protected CommonlangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCLfile
entryRuleCLfile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCLfileRule()); }
	 iv_ruleCLfile=ruleCLfile 
	 { $current=$iv_ruleCLfile.current; } 
	 EOF 
;

// Rule CLfile
ruleCLfile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCLfileAccess().getScriptsScriptParserRuleCall_0_0()); 
	    }
		lv_scripts_0_0=ruleScript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCLfileRule());
	        }
       		add(
       			$current, 
       			"scripts",
        		lv_scripts_0_0, 
        		"Script");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCLfileAccess().getMetsMetaMethodsParserRuleCall_1_0()); 
	    }
		lv_mets_1_0=ruleMetaMethods		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCLfileRule());
	        }
       		set(
       			$current, 
       			"mets",
        		lv_mets_1_0, 
        		"MetaMethods");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	 iv_ruleScript=ruleScript 
	 { $current=$iv_ruleScript.current; } 
	 EOF 
;

// Rule Script
ruleScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='script' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScriptAccess().getScriptKeyword_0());
    }
(
(
		lv_name_1_0=RULE_CAPITALFIRST
		{
			newLeafNode(lv_name_1_0, grammarAccess.getScriptAccess().getNameCAPITALFIRSTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"CAPITALFIRST");
	    }

)
)	otherlv_2='targets' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getScriptAccess().getTargetsKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getLeftParenthesisKeyword_3());
    }
(
(
(
		lv_robottypes_4_1=RULE_LOWERFIRST
		{
			newLeafNode(lv_robottypes_4_1, grammarAccess.getScriptAccess().getRobottypesLOWERFIRSTTerminalRuleCall_4_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"robottypes",
        		lv_robottypes_4_1, 
        		"LOWERFIRST");
	    }

    |		lv_robottypes_4_2=RULE_CAPITALFIRST
		{
			newLeafNode(lv_robottypes_4_2, grammarAccess.getScriptAccess().getRobottypesCAPITALFIRSTTerminalRuleCall_4_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"robottypes",
        		lv_robottypes_4_2, 
        		"CAPITALFIRST");
	    }

)

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScriptAccess().getCommaKeyword_5());
    }
(
(
(
		lv_robotconfigs_6_1=RULE_LOWERFIRST
		{
			newLeafNode(lv_robotconfigs_6_1, grammarAccess.getScriptAccess().getRobotconfigsLOWERFIRSTTerminalRuleCall_6_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"robotconfigs",
        		lv_robotconfigs_6_1, 
        		"LOWERFIRST");
	    }

    |		lv_robotconfigs_6_2=RULE_CAPITALFIRST
		{
			newLeafNode(lv_robotconfigs_6_2, grammarAccess.getScriptAccess().getRobotconfigsCAPITALFIRSTTerminalRuleCall_6_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"robotconfigs",
        		lv_robotconfigs_6_2, 
        		"CAPITALFIRST");
	    }

)

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getScriptAccess().getRightParenthesisKeyword_7());
    }
(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getScriptAccess().getCommaKeyword_8_0());
    }
	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getScriptAccess().getLeftParenthesisKeyword_8_1());
    }
(
(
(
		lv_robottypes_10_1=RULE_LOWERFIRST
		{
			newLeafNode(lv_robottypes_10_1, grammarAccess.getScriptAccess().getRobottypesLOWERFIRSTTerminalRuleCall_8_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"robottypes",
        		lv_robottypes_10_1, 
        		"LOWERFIRST");
	    }

    |		lv_robottypes_10_2=RULE_CAPITALFIRST
		{
			newLeafNode(lv_robottypes_10_2, grammarAccess.getScriptAccess().getRobottypesCAPITALFIRSTTerminalRuleCall_8_2_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"robottypes",
        		lv_robottypes_10_2, 
        		"CAPITALFIRST");
	    }

)

)
)	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getScriptAccess().getCommaKeyword_8_3());
    }
(
(
(
		lv_robotconfigs_12_1=RULE_LOWERFIRST
		{
			newLeafNode(lv_robotconfigs_12_1, grammarAccess.getScriptAccess().getRobotconfigsLOWERFIRSTTerminalRuleCall_8_4_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"robotconfigs",
        		lv_robotconfigs_12_1, 
        		"LOWERFIRST");
	    }

    |		lv_robotconfigs_12_2=RULE_CAPITALFIRST
		{
			newLeafNode(lv_robotconfigs_12_2, grammarAccess.getScriptAccess().getRobotconfigsCAPITALFIRSTTerminalRuleCall_8_4_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScriptRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"robotconfigs",
        		lv_robotconfigs_12_2, 
        		"CAPITALFIRST");
	    }

)

)
)	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getScriptAccess().getRightParenthesisKeyword_8_5());
    }
)*	otherlv_14='{' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getScriptAccess().getLeftCurlyBracketKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getMethodsUserMethodParserRuleCall_10_0()); 
	    }
		lv_methods_15_0=ruleUserMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_15_0, 
        		"UserMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getScriptAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleMetaMethods
entryRuleMetaMethods returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetaMethodsRule()); }
	 iv_ruleMetaMethods=ruleMetaMethods 
	 { $current=$iv_ruleMetaMethods.current; } 
	 EOF 
;

// Rule MetaMethods
ruleMetaMethods returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMetaMethodsAccess().getMetaMethodsAction_0(),
            $current);
    }
)	otherlv_1='metamethodscollection' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMetaMethodsAccess().getMetamethodscollectionKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMetaMethodsAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetaMethodsAccess().getMethodsMetaMethodParserRuleCall_3_0()); 
	    }
		lv_methods_3_0=ruleMetaMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetaMethodsRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_3_0, 
        		"MetaMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMetaMethodsAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getExsSimpleExpressionParserRuleCall_2_0_0_0()); 
	    }
		lv_exs_2_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"exs",
        		lv_exs_2_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getSemicolonKeyword_2_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getExsStructureExpressionParserRuleCall_2_1_0()); 
	    }
		lv_exs_4_0=ruleStructureExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"exs",
        		lv_exs_4_0, 
        		"StructureExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	 iv_ruleSimpleExpression=ruleSimpleExpression 
	 { $current=$iv_ruleSimpleExpression.current; } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getCrementParserRuleCall_0()); 
    }
    this_Crement_0=ruleCrement
    { 
        $current = $this_Crement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getCallParserRuleCall_1()); 
    }
    this_Call_1=ruleCall
    { 
        $current = $this_Call_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getAssignmentParserRuleCall_2()); 
    }
    this_Assignment_2=ruleAssignment
    { 
        $current = $this_Assignment_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getReturnParserRuleCall_3()); 
    }
    this_Return_3=ruleReturn
    { 
        $current = $this_Return_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStructureExpression
entryRuleStructureExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureExpressionRule()); }
	 iv_ruleStructureExpression=ruleStructureExpression 
	 { $current=$iv_ruleStructureExpression.current; } 
	 EOF 
;

// Rule StructureExpression
ruleStructureExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStructureExpressionAccess().getBlockParserRuleCall_0()); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructureExpressionAccess().getIfParserRuleCall_1()); 
    }
    this_If_1=ruleIf
    { 
        $current = $this_If_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructureExpressionAccess().getForParserRuleCall_2()); 
    }
    this_For_2=ruleFor
    { 
        $current = $this_For_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStructureExpressionAccess().getWhileParserRuleCall_3()); 
    }
    this_While_3=ruleWhile
    { 
        $current = $this_While_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0()); 
    }
    this_SimpleExpression_0=ruleSimpleExpression
    { 
        $current = $this_SimpleExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getStructureExpressionParserRuleCall_1()); 
    }
    this_StructureExpression_1=ruleStructureExpression
    { 
        $current = $this_StructureExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getVariVarReferenceParserRuleCall_0_0_0()); 
	    }
		lv_vari_0_1=ruleVarReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"vari",
        		lv_vari_0_1, 
        		"VarReference");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getVariDeclarationParserRuleCall_0_0_1()); 
	    }
		lv_vari_0_2=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"vari",
        		lv_vari_0_2, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(((
(
ruleMathOperator
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getOpMathOperatorParserRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleMathOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"MathOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getValueValueExpressionParserRuleCall_1_2_0()); 
	    }
		lv_value_3_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	 iv_ruleCall=ruleCall 
	 { $current=$iv_ruleCall.current; } 
	 EOF 
;

// Rule Call
ruleCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getCallAccess().getUserMethodCallParserRuleCall_0_0()); 
    }
    this_UserMethodCall_0=ruleUserMethodCall
    { 
        $current = $this_UserMethodCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallAccess().getMetaMethodCallParserRuleCall_0_1()); 
    }
    this_MetaMethodCall_1=ruleMetaMethodCall
    { 
        $current = $this_MetaMethodCall_1.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParametersValueExpressionParserRuleCall_2_0()); 
	    }
		lv_parameters_3_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCallAccess().getCommaKeyword_3_0());
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getCallAccess().getParametersValueExpressionParserRuleCall_3_1_0()); 
	    }
		lv_parameters_5_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCallAccess().getRightParenthesisKeyword_4());
    }
)
;







// Entry rule entryRuleMetaMethod
entryRuleMetaMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetaMethodRule()); }
	 iv_ruleMetaMethod=ruleMetaMethod 
	 { $current=$iv_ruleMetaMethod.current; } 
	 EOF 
;

// Rule MetaMethod
ruleMetaMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='meta' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMetaMethodAccess().getMetaKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetaMethodAccess().getTypeMethodtypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleMethodtype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetaMethodRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Methodtype");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_CAPITALFIRST
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMetaMethodAccess().getNameCAPITALFIRSTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetaMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"CAPITALFIRST");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMetaMethodAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetaMethodAccess().getParametersDeclarationParserRuleCall_4_0()); 
	    }
		lv_parameters_4_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetaMethodRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMetaMethodAccess().getCommaKeyword_5_0());
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getMetaMethodAccess().getParametersDeclarationParserRuleCall_5_1_0()); 
	    }
		lv_parameters_6_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetaMethodRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMetaMethodAccess().getRightParenthesisKeyword_6());
    }
	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMetaMethodAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleUserMethod
entryRuleUserMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserMethodRule()); }
	 iv_ruleUserMethod=ruleUserMethod 
	 { $current=$iv_ruleUserMethod.current; } 
	 EOF 
;

// Rule UserMethod
ruleUserMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUserMethodAccess().getTypeMethodtypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleMethodtype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserMethodRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Methodtype");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_LOWERFIRST
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUserMethodAccess().getNameLOWERFIRSTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LOWERFIRST");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUserMethodAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUserMethodAccess().getParametersDeclarationParserRuleCall_3_0()); 
	    }
		lv_parameters_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserMethodRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUserMethodAccess().getCommaKeyword_4_0());
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getUserMethodAccess().getParametersDeclarationParserRuleCall_4_1_0()); 
	    }
		lv_parameters_5_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserMethodRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUserMethodAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUserMethodAccess().getBlBlockParserRuleCall_6_0()); 
	    }
		lv_bl_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserMethodRule());
	        }
       		set(
       			$current, 
       			"bl",
        		lv_bl_7_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUserMethodCall
entryRuleUserMethodCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserMethodCallRule()); }
	 iv_ruleUserMethodCall=ruleUserMethodCall 
	 { $current=$iv_ruleUserMethodCall.current; } 
	 EOF 
;

// Rule UserMethodCall
ruleUserMethodCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserMethodCallRule());
	        }
        }
	otherlv_0=RULE_LOWERFIRST
	{
		newLeafNode(otherlv_0, grammarAccess.getUserMethodCallAccess().getMethodMethodCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleMetaMethodCall
entryRuleMetaMethodCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetaMethodCallRule()); }
	 iv_ruleMetaMethodCall=ruleMetaMethodCall 
	 { $current=$iv_ruleMetaMethodCall.current; } 
	 EOF 
;

// Rule MetaMethodCall
ruleMetaMethodCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetaMethodCallRule());
	        }
        }
	otherlv_0=RULE_CAPITALFIRST
	{
		newLeafNode(otherlv_0, grammarAccess.getMetaMethodCallAccess().getMethodMethodCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueExpressionRule()); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueExpressionAccess().getParanValueExpressionParserRuleCall_0()); 
    }
    this_ParanValueExpression_0=ruleParanValueExpression
    { 
        $current = $this_ParanValueExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueExpressionAccess().getBasicValueExpressionParserRuleCall_1()); 
    }
    this_BasicValueExpression_1=ruleBasicValueExpression
    { 
        $current = $this_BasicValueExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParanValueExpression
entryRuleParanValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParanValueExpressionRule()); }
	 iv_ruleParanValueExpression=ruleParanValueExpression 
	 { $current=$iv_ruleParanValueExpression.current; } 
	 EOF 
;

// Rule ParanValueExpression
ruleParanValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParanValueExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParanValueExpressionAccess().getExValueExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParanValueExpressionRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParanValueExpressionAccess().getRightParenthesisKeyword_2());
    }
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getParanValueExpressionAccess().getOpMathOperatorParserRuleCall_3_0_0_0()); 
	    }
		lv_op_3_1=ruleMathOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParanValueExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_3_1, 
        		"MathOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getParanValueExpressionAccess().getOpBooleanOperatorParserRuleCall_3_0_0_1()); 
	    }
		lv_op_3_2=ruleBooleanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParanValueExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_3_2, 
        		"BooleanOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getParanValueExpressionAccess().getOpComparisonOperatorParserRuleCall_3_0_0_2()); 
	    }
		lv_op_3_3=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParanValueExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_3_3, 
        		"ComparisonOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParanValueExpressionAccess().getVarrightValueExpressionParserRuleCall_3_1_0()); 
	    }
		lv_varright_4_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParanValueExpressionRule());
	        }
       		set(
       			$current, 
       			"varright",
        		lv_varright_4_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBasicValueExpression
entryRuleBasicValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicValueExpressionRule()); }
	 iv_ruleBasicValueExpression=ruleBasicValueExpression 
	 { $current=$iv_ruleBasicValueExpression.current; } 
	 EOF 
;

// Rule BasicValueExpression
ruleBasicValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicValueExpressionAccess().getVarleftValueParserRuleCall_0_0()); 
	    }
		lv_varleft_0_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicValueExpressionRule());
	        }
       		set(
       			$current, 
       			"varleft",
        		lv_varleft_0_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicValueExpressionAccess().getOpMathOperatorParserRuleCall_1_0_0_0()); 
	    }
		lv_op_1_1=ruleMathOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicValueExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_1, 
        		"MathOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getBasicValueExpressionAccess().getOpBooleanOperatorParserRuleCall_1_0_0_1()); 
	    }
		lv_op_1_2=ruleBooleanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicValueExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_2, 
        		"BooleanOperator");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getBasicValueExpressionAccess().getOpComparisonOperatorParserRuleCall_1_0_0_2()); 
	    }
		lv_op_1_3=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicValueExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_3, 
        		"ComparisonOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicValueExpressionAccess().getVarrightValueExpressionParserRuleCall_1_1_0()); 
	    }
		lv_varright_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicValueExpressionRule());
	        }
       		set(
       			$current, 
       			"varright",
        		lv_varright_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCrement
entryRuleCrement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCrementRule()); }
	 iv_ruleCrement=ruleCrement 
	 { $current=$iv_ruleCrement.current; } 
	 EOF 
;

// Rule Crement
ruleCrement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCrementAccess().getValueVarReferenceParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleVarReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrementRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"VarReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCrementAccess().getOpCrementOperatorParserRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleCrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrementRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"CrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonOperatorRule()); } 
	 iv_ruleComparisonOperator=ruleComparisonOperator 
	 { $current=$iv_ruleComparisonOperator.current.getText(); }  
	 EOF 
;

// Rule ComparisonOperator
ruleComparisonOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getLessThanSignKeyword_2()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getGreaterThanSignKeyword_3()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getLessThanSignEqualsSignKeyword_4()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparisonOperatorAccess().getGreaterThanSignEqualsSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleBooleanOperator
entryRuleBooleanOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanOperatorRule()); } 
	 iv_ruleBooleanOperator=ruleBooleanOperator 
	 { $current=$iv_ruleBooleanOperator.current.getText(); }  
	 EOF 
;

// Rule BooleanOperator
ruleBooleanOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOperatorAccess().getAmpersandAmpersandKeyword_0()); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOperatorAccess().getVerticalLineVerticalLineKeyword_1()); 
    }

    |
	kw='!&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOperatorAccess().getExclamationMarkAmpersandAmpersandKeyword_2()); 
    }

    |
	kw='!||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanOperatorAccess().getExclamationMarkVerticalLineVerticalLineKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleMathOperator
entryRuleMathOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMathOperatorRule()); } 
	 iv_ruleMathOperator=ruleMathOperator 
	 { $current=$iv_ruleMathOperator.current.getText(); }  
	 EOF 
;

// Rule MathOperator
ruleMathOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getAsteriskKeyword_2()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMathOperatorAccess().getSolidusKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleCrementOperator
entryRuleCrementOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCrementOperatorRule()); } 
	 iv_ruleCrementOperator=ruleCrementOperator 
	 { $current=$iv_ruleCrementOperator.current.getText(); }  
	 EOF 
;

// Rule CrementOperator
ruleCrementOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCrementOperatorAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCrementOperatorAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getExValueExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getBlBlockParserRuleCall_4_0()); 
	    }
		lv_bl_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"bl",
        		lv_bl_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getElElseParserRuleCall_5_0()); 
	    }
		lv_el_5_0=ruleElse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"el",
        		lv_el_5_0, 
        		"Else");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleElse
entryRuleElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseRule()); }
	 iv_ruleElse=ruleElse 
	 { $current=$iv_ruleElse.current; } 
	 EOF 
;

// Rule Else
ruleElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='else' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElseAccess().getElseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseAccess().getExExpressionParserRuleCall_1_0()); 
	    }
		lv_ex_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForRule()); }
	 iv_ruleFor=ruleFor 
	 { $current=$iv_ruleFor.current; } 
	 EOF 
;

// Rule For
ruleFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getInitSimpleExpressionParserRuleCall_2_0()); 
	    }
		lv_init_2_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_2_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getCheckValueExpressionParserRuleCall_4_0()); 
	    }
		lv_check_4_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"check",
        		lv_check_4_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForAccess().getSemicolonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getActionSimpleExpressionParserRuleCall_6_0()); 
	    }
		lv_action_6_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_6_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForAccess().getRightParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getBlBlockParserRuleCall_8_0()); 
	    }
		lv_bl_8_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"bl",
        		lv_bl_8_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	 iv_ruleWhile=ruleWhile 
	 { $current=$iv_ruleWhile.current; } 
	 EOF 
;

// Rule While
ruleWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getExValueExpressionParserRuleCall_2_0()); 
	    }
		lv_ex_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"ex",
        		lv_ex_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getBlBlockParserRuleCall_4_0()); 
	    }
		lv_bl_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"bl",
        		lv_bl_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getCallParserRuleCall_0()); 
    }
    this_Call_0=ruleCall
    { 
        $current = $this_Call_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getVarReferenceParserRuleCall_1()); 
    }
    this_VarReference_1=ruleVarReference
    { 
        $current = $this_VarReference_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getBasicValueParserRuleCall_2()); 
    }
    this_BasicValue_2=ruleBasicValue
    { 
        $current = $this_BasicValue_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicValue
entryRuleBasicValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicValueRule()); }
	 iv_ruleBasicValue=ruleBasicValue 
	 { $current=$iv_ruleBasicValue.current; } 
	 EOF 
;

// Rule BasicValue
ruleBasicValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicValueAccess().getBooleanValueParserRuleCall_0()); 
    }
    this_BooleanValue_0=ruleBooleanValue
    { 
        $current = $this_BooleanValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicValueAccess().getNumberValueParserRuleCall_1()); 
    }
    this_NumberValue_1=ruleNumberValue
    { 
        $current = $this_NumberValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicValueAccess().getStringValueParserRuleCall_2()); 
    }
    this_StringValue_2=ruleStringValue
    { 
        $current = $this_StringValue_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=	'true' 
    {
        newLeafNode(lv_value_0_1, grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_1, null);
	    }

    |		lv_value_0_2=	'false' 
    {
        newLeafNode(lv_value_0_2, grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	 iv_ruleNumberValue=ruleNumberValue 
	 { $current=$iv_ruleNumberValue.current; } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberValueAccess().getValueINTSTRINGParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleINTSTRING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INTSTRING");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVarReference
entryRuleVarReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarReferenceRule()); }
	 iv_ruleVarReference=ruleVarReference 
	 { $current=$iv_ruleVarReference.current; } 
	 EOF 
;

// Rule VarReference
ruleVarReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarReferenceRule());
	        }
        }
	otherlv_0=RULE_LOWERFIRST
	{
		newLeafNode(otherlv_0, grammarAccess.getVarReferenceAccess().getVariDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDatatypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleDatatype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Datatype");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_LOWERFIRST
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDeclarationAccess().getNameLOWERFIRSTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LOWERFIRST");
	    }

)
))
;





// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	 iv_ruleReturn=ruleReturn 
	 { $current=$iv_ruleReturn.current; } 
	 EOF 
;

// Rule Return
ruleReturn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReturnAccess().getReturnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnAccess().getValueValueExpressionParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMethodtype
entryRuleMethodtype returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodtypeRule()); } 
	 iv_ruleMethodtype=ruleMethodtype 
	 { $current=$iv_ruleMethodtype.current.getText(); }  
	 EOF 
;

// Rule Methodtype
ruleMethodtype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMethodtypeAccess().getVoidKeyword_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getMethodtypeAccess().getDatatypeParserRuleCall_1()); 
    }
    this_Datatype_1=ruleDatatype    {
		$current.merge(this_Datatype_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleDatatype
entryRuleDatatype returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatatypeRule()); } 
	 iv_ruleDatatype=ruleDatatype 
	 { $current=$iv_ruleDatatype.current.getText(); }  
	 EOF 
;

// Rule Datatype
ruleDatatype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDatatypeAccess().getIntKeyword_0()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDatatypeAccess().getStringKeyword_1()); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDatatypeAccess().getBooleanKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleINTSTRING
entryRuleINTSTRING returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTSTRINGRule()); } 
	 iv_ruleINTSTRING=ruleINTSTRING 
	 { $current=$iv_ruleINTSTRING.current.getText(); }  
	 EOF 
;

// Rule INTSTRING
ruleINTSTRING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getINTSTRINGAccess().getINTTerminalRuleCall()); 
    }

    ;





RULE_LOWERFIRST : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_CAPITALFIRST : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


