grammar org.xtext.Commonlang  with org.eclipse.xtext.common.Terminals

generate commonlang "http://www.xtext.org/Commonlang"

CLfile:
	scripts+=(Script)*
	mets=MetaMethods
;

Script:
	'script' name=CAPITALFIRST 'targets' ('('robottypes+=LOWERFIRST ',' robotconfigs+=LOWERFIRST | '('('('robottypes+=LOWERFIRST ',' robotconfigs+=LOWERFIRST')')* )')' '{'
		(methods+=UserMethod*)
	'}'
;

MetaMethods:
	{MetaMethods}'metamethodscollection''{'
		(methods+=MetaMethod)*
	'}'
;

Block:
	{Block} '{' ( (exs+=SimpleExpression ';' | exs+=StructureExpression))* '}'
;

SimpleExpression:
	Call | Assignment | Return
;

StructureExpression:
	Block | If | Else | For | While
;

Expression:
	SimpleExpression | StructureExpression
;


Assignment:
	vari=([Declaration|LOWERFIRST] | Declaration) ( => '=' value=Value)
;

Call:
	(UserMethodCall | MetaMethodCall) '('parameters+=Value? (','+ parameters+=Value)*')'
;

Method:
	(UserMethod | MetaMethod)
;

MetaMethod:
	'meta' type=Methodtype name=CAPITALFIRST '(' parameters+=Declaration? (','+ parameters+=Declaration)* ')' ';'
;

UserMethod:
	type=Methodtype name=LOWERFIRST '(' parameters+=Declaration? (','+ parameters+=Declaration)* ')' bl=Block
;

UserMethodCall:
	method=([Method|LOWERFIRST])
;

MetaMethodCall:
	method=([Method|CAPITALFIRST])
;

terminal LOWERFIRST: ('a'..'z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal CAPITALFIRST: ('A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;


MetaMetaMethod:
	name='ReadSensors'
	| name='Touching' 
	| name='TouchingBoth'
	| name='TouchingLeft' 
	| name='TouchingRight' 
	| name='Seeing'
	| name='SeeingBoth'
	| name='SeeingLeft'
	| name='SeeingRight'
	| name='MoveForward'
	| name='MoveBackward'
	| name='TurnRight'
	| name='TurnLeft' 
	| name='Idle'
;

Bool:
	varleft=Value (=> op=ComparisonOperator varright=Value)? (bop=BooleanOperator bnext=Bool)?
;

ComparisonOperator:
	'==' | '!=' | '<' | '>' | '<=' | '>='
;

BooleanOperator:
	'&&' | '||' | '!&&' | '!||'
;

If:
	'if' '(' ex=Bool ')' bl=Block
;

Else:
	'else' ex=Expression
;

For:
	'for' '(' init=Expression ';' check=Bool ';' action=Expression')' bl=Block
;

While:
	'while' '(' ex=Bool ')' bl=Block
;

Value:
	 Call | VarReference | BasicValue
;

BasicValue:
	BooleanValue | NumberValue | StringValue
;

BooleanValue:
	value=('true' | 'false')
;

StringValue:
	value=STRING
;

NumberValue:
	value=INTSTRING
;

VarReference:
	vari=[Declaration|LOWERFIRST]
;

Declaration: 
	type=Datatype name=LOWERFIRST
;

Return:
	'return' val=Value
;

Methodtype:
	'void' | Datatype
;

Datatype:
	'int' | 'string' | 'boolean'
;

INTSTRING:
	INT
;
