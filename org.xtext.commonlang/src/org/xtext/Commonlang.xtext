grammar org.xtext.Commonlang  with org.eclipse.xtext.common.Terminals

generate commonlang "http://www.xtext.org/Commonlang"

CLfile:
	scripts+=(Script)*
	mets=MetaMethods
;

Script:
	'script' name=CAPITALFIRST 'targets' '('robottypes+=(LOWERFIRST|CAPITALFIRST) ',' robotconfigs+=(LOWERFIRST|CAPITALFIRST)')'(',''('robottypes+=(LOWERFIRST|CAPITALFIRST) ',' robotconfigs+=(LOWERFIRST|CAPITALFIRST)')')* '{'
		(methods+=UserMethod*)
	'}'
;

MetaMethods:
	{MetaMethods}'metamethodscollection''{'
		(methods+=MetaMethod)*
	'}'
;

Block:
	{Block} '{' ( (exs+=SimpleExpression ';' | exs+=StructureExpression))* '}'
;

SimpleExpression:
	 Crement | Call | Assignment | Return
;

StructureExpression:
	Block | If | Else | For | While
;

Expression:
	SimpleExpression | StructureExpression
;


Assignment:
	vari=(VarReference | Declaration) ( => op=MathOperator?'=' value=ValueExpression)
;

Call:
	(UserMethodCall | MetaMethodCall) '('parameters+=ValueExpression? (','+ parameters+=ValueExpression)*')'
;

Method:
	(UserMethod | MetaMethod)
;

MetaMethod:
	'meta' type=Methodtype name=CAPITALFIRST '(' parameters+=Declaration? (','+ parameters+=Declaration)* ')' ';'
;

UserMethod:
	type=Methodtype name=LOWERFIRST '(' parameters+=Declaration? (','+ parameters+=Declaration)* ')' bl=Block
;

UserMethodCall:
	method=([Method|LOWERFIRST])
;

MetaMethodCall:
	method=([Method|CAPITALFIRST])
;

terminal LOWERFIRST: ('a'..'z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal CAPITALFIRST: ('A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

ValueExpression:
	ParanValueExpression | BasicValueExpression
;

ParanValueExpression:
	'('ex=ValueExpression')' (op=(MathOperator|BooleanOperator|ComparisonOperator) varright=ValueExpression)?
;

BasicValueExpression:
	varleft=(Value) (op=(MathOperator|BooleanOperator|ComparisonOperator) varright=ValueExpression)?
;

Crement:
	value=VarReference op=CrementOperator
;

ComparisonOperator:
	'==' | '!=' | '<' | '>' | '<=' | '>='
;

BooleanOperator:
	'&&' | '||' | '!&&' | '!||'
;

MathOperator:
	'+' | '-' | '*' | '/'
;

CrementOperator:
	'++' | '--'
;
If:
	'if' '(' ex=ValueExpression ')' bl=Block
;

Else:
	'else' ex=Expression
;

For:
	'for' '(' init=SimpleExpression ';' check=ValueExpression ';' action=SimpleExpression')' bl=Block
;

While:
	'while' '(' ex=ValueExpression ')' bl=Block
;

Value:
	 Call | VarReference | BasicValue
;

BasicValue:
	BooleanValue | NumberValue | StringValue
;

BooleanValue:
	value=('true' | 'false')
;

StringValue:
	value=STRING
;

NumberValue:
	value=INTSTRING
;

VarReference:
	vari=[Declaration|LOWERFIRST]
;

Declaration: 
	type=Datatype name=LOWERFIRST
;

Return:
	'return' val=ValueExpression
;

Methodtype:
	'void' | Datatype
;

Datatype:
	'int' | 'string' | 'boolean'
;

INTSTRING:
	INT
;
